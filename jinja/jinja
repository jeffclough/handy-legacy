#!/usr/bin/env python

"""

This script's only non-standard dependency is the Jinja2 package, available
via pip. I generally run it from a Python virtualenv ...

    python3 -m venv jinja
    cd jinja
    . bin/activate
    pip install Jinja2
    cp {path_to_this_source}/jinja .
    ./jinja -h
    :
    :
    deactivate

... but make Jinja2 available however you'd like. This script is otherwise
self-contained.

"""

import argparse,os,pdb,re,shlex,sys,traceback
from collections import namedtuple
from datetime import date,datetime,time,timedelta,timezone
from pprint import pformat,pprint
from jinja2 import FileSystemLoader,Environment
from jinja2.exceptions import TemplateError

Version=namedtuple('Version','major minor micro releaselevel,serial')
version=Version(1,1,0,'beta',2)

DATE_FMT=DEF_DATE_FMT="%Y-%m-%d"
TIME_FMT=DEF_TIME_FMT="%H:%M:%S"
DATETIME_FMT=DEF_DATETIME_FMT=f"{DATE_FMT} at {TIME_FMT}"

def numeric(s):
  """Convert s, if possible, to an int or fload and return that numeric
  value. Otherwise, return the original string value."""

  try:
    n=int(s)
  except:
    try:
      n=float(s)
    except:
      n=s
  return n

def days_in_month(date):
  "Return the number of days in the given month of the given year."

  if date.month in (4,6,9,11):
    n=30
  elif date.month in (1,3,5,7,8,10,12):
    n=31
  else:
    n=29 if date.year%400==0 or (date.year%4==0 and date.year%100!=0) else 28
  return n

variables=dict(
  # Constants:
  DATE_FMT=DATE_FMT,
  TIME_FMT=TIME_FMT,
  DATETIME_FMT=DATETIME_FMT,
  # Date and time classes:
  date=date,
  datetime=datetime,
  time=time,
  timedelta=timedelta,
  timezone=timezone,
  # Pre-computed variables:
  now=datetime.now(),
  today=date.today(),
  name_of_today=date.today().strftime('%A'),
  name_of_this_month=date.today().strftime('%B'),
  # Functions callable from Jinja:
  abspath=os.path.abspath,
  basename=os.path.basename,
  days_in_month=days_in_month,
  dirname=os.path.dirname,
  joinpath=os.path.join,
  normpath=os.path.normpath,
  numeric=numeric,
  pathexists=os.path.exists,
  splitpath=os.path.split,
)

def varval(s):
  "Given a 'variable=value' string, parse it and return a (var,val) tuple."

  eq=s.index('=')
  var=s[:eq].strip()
  #val=eval(s[eq+1:].strip())
  val=s[eq+1:].strip()
  #print(f"DEBUG: {var=} {val=}")
  try:
    val=eval(val,variables)
    #print(f"DEBUG: {var=} {val=}")
  except:
    pass
  return var,val

ap=argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
description="""
Render a Jinga2 template to standard output. Run this command with no
arguments for a list of variables, Python classes, and functions available
from within a template file. You can also include your own variables on the
command line as arguments.""",
epilog="""
These are Python entities for use within templates:

  Default date and time formats:
    DATE_FMT='%Y-%m-%d'
    TIME_FMT='%H:%M:%S'
    DATETIME_FMT='%Y-%m-%d at %H:%M:%S'

  See https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
  for full docs how to formate dates and times.

  Python classes:
    date - https://docs.python.org/3/library/datetime.html#date-objects
    datetime - https://docs.python.org/3/library/datetime.html#datetime-objects
    time - https://docs.python.org/3/library/datetime.html#time-objects
    timedelta - https://docs.python.org/3/library/datetime.html#timedelta-objects
    timezone - https://docs.python.org/3/library/datetime.html#timezone-objects

  Runtime Environment:
    env.PWD - the Preset Workign Directory of the Jinja renderer
    env.USER - username of the account running the renderer
    env.TEMPLATE_DIR - directory our template is in
    env.TEMPLATE_NAME - filename of our template
    env.TEMPLATE_PATH - path (possibly relative) to our template file
    env.PYTHON_VERSION - string representation of our Python version
    env.PYTHON_VERSION_INFO - Python version as a (major,minor,micro,releaselevel,serial) tuple
    env.DATE - date object holding the date this template was rendered
    env.DATETIME - date object holding the date and time this template was rendered
    env.TIME - time object holding the time this tempate was rendered
    env.JINJA_RENDERER - full path to the Jinja render command
    env.JINJA_RENDERER_VERSION_INFO - renderer version as a (major,minor,micro,releaselevel,serial) tuple
    env.JINJA_RENDERER_VERSION - renderer version as a string
    env.JINJA_COMMAND - the command line that rendered this template

  Pre-initialized varaibles that might be handy:
    now=datetime.datetime(2022, 4, 4, 18, 6, 7, 95466)
    today=datetime.date(2022, 4, 4)
    name_of_today='Monday'
    name_of_this_month='April'

  Functions for working with dates:
    abspath(path: str) -> str
      Return a normalized absolutized version of the pathname path.

    days_in_month(d: date) -> int
      Returns the number of days in the given year and month.

    basename(path: str) -> str
      Returns the filename portion of the given path.

    dirname(path: str) -> str
      Returns the directory portion of the given path.

    joinpath(path: str, *paths: tuple) -> str
      Join one or more path components intelligently. The return value is the
      concatenation of path and any members of *paths with exactly one
      directory separator following each non-empty part except the last,
      meaning that the result will only end in a separator if the last part is
      empty. If a component is an absolute path, all previous components are
      thrown away and joining continues from the absolute path component.

    normpath(path: str) -> str
      Normalize a pathname by collapsing redundant separators and up-level
      references so that A//B, A/B/, A/./B and A/foo/../B all become A/B. This
      string manipulation may change the meaning of a path that contains
      symbolic links. On Windows, it converts forward slashes to backward
      slashes.

    numeric(s: str) -> [int,str]
      Returns the numeric value of the given string if possible. Otherwise, it
      returns the original string.

    pathexists(path: str) -> bool
      Return True iff the given path exists.

    splitpath(path: str) -> tuple
      Split the pathname path into a pair, (head, tail) where tail is the last
      pathname component and head is everything leading up to that. The tail
      part will never contain a slash; if path ends in a slash, tail will be
      empty. If there is no slash in path, head will be empty. If path is
      empty, both head and tail are empty. Trailing slashes are stripped from
      head unless it is the root (one or more slashes only). In all cases,
      join(head, tail) returns a path to the same location as path (but the
      strings may differ). Also see the functions dirname() and basename().

""")
ap.add_argument('--date',action='store',help="Replace toady's date with the given in %r format."%DATE_FMT.replace('%','%%'))
ap.add_argument('--dir',action='store',type=os.path.expanduser,help="Give the name of the tmeplate directory. This can also be provided by giving a complete path in the argument to --template below.")
ap.add_argument('--template',action='store',type=os.path.expanduser,help="Give the name of the template to be rendered. If no path is included, --dir (above) must be given.")
ap.add_argument('--line-comment','-C',action='store',help="If given, any line begginning with this string will be a comment. Ordinarily statements must be surrounded by {# and #}.")
ap.add_argument('--line-statement','-S',action='store',help="If given, any line begginning with this string will be a statement. Ordinarily statements must be surrounded by {%% and %%}.")
ap.add_argument('--extension','-x',dest='extensions',metavar='EXT',action='append',help="Load the given Jinja2 extension (e.g. debug, do, i18n, or loopcontrols), one at a time, using as many --extension options as needed. See https://jinja.palletsprojects.com/en/3.1.x/extensions/#jinja-extensions for how each extension works. A warning message to standard error will result from any attempt to load an unavailable Jinja2 extension.")
ap.add_argument('--debugger',action='store_true',help="Start this script in the debugger. DON'T DO THIS unless you're familiar with textual debuggers. For the initiated, see https://docs.python.org/3/library/pdb.html#debugger-commands for docs.")
ap.add_argument('args',metavar='VAR=VAL',action='store',type=varval,nargs='*')
opt=ap.parse_args()

if opt.debugger:
  pdb.set_trace()

if not opt.extensions:
  opt.extensions=[]

if '__builtins__' in variables:
  del variables['__builtins__']

if opt.date:
  dt=datetime.strptime(opt.date,DATE_FMT)
  variables['today']=dt.date()
  variables['now'].replace(year=dt.year,month=dt.month,day=dt.day)
  variables['name_of_today']=variables['today'].strftime('%A')
  variables['name_of_this_month']=variables['today'].strftime('%B')

# Let the user choose his own formats for dates and times.
for var,val in opt.args:
  if var=='DATE_FMT':
    DATE_FMT=val
  elif var=='TIME_FMT':
    TIME_FMT=val
  elif var=='DATETIME_FMT':
    DATETIME_FMT=var
# Conditionally update DATETIME_FMT.
if (DATE_FMT!=DEF_DATE_FMT or TIME_FMT!=DEF_TIME_FMT) and DATETIME_FMT==DEF_DATETIME_FMT:
  DATETIME_FMT=f"{DATE_FMT} at {TIME_FMT}"

for var,val in opt.args:
  if var not in ('DATE_FMT','TIME_FMT','DATETIME_FMT'):
    variables[var]=val

template_dir=template_name=template_path=None
if opt.template:
  path,filename=os.path.split(opt.template)
  if path:
    template_dir=path
  if filename:
    template_name=filename
  if not template_dir and opt.dir:
    template_dir=opt.dir
  if template_name and not template_dir:
    print("""Error: If you give a template filename with not path information, you MUST give a --dir path where the template can be found, even if it's only "." for the current directory.""",file=sys.stderr)
    ap.print_help()
    sys.exit(1)
  template_path=os.path.join(template_dir,template_name)

# Add some runtime context.
dt=datetime.now()
variables['env']=dict(
  PWD=os.getcwd(), USER=os.getlogin(),
  TEMPLATE_DIR=template_dir,
  TEMPLATE_NAME=template_name,
  TEMPLATE_PATH=template_path,
  PYTHON_VERSION=sys.version,
  PYTHON_VERSION_INFO=sys.version_info,
  DATE=dt.date(),
  DATETIME=dt,
  TIME=dt.time(),
  JINJA_RENDERER=sys.argv[0],
  JINJA_RENDERER_VERSION_INFO=version,
  JINJA_RENDERER_VERSION=f"{version.major}.{version.minor}.{version.micro}-{version.releaselevel}-{version.serial}",
  JINJA_COMMAND=shlex.join([os.path.basename(sys.argv[0])]+sys.argv[1:]),
)

if not opt.template:
  print("Available values, classes, and functions available within Jinja templates:")
  for var,val in variables.items():
    if isinstance(val,dict):
      print(f"    {var}={{")
      for k,v in val.items():
        print(f"        {k}={v!r}")
      print(f"    }}")
    else:
      print(f"    {var}={val!r}")

  sys.exit(0)

def render_from_template(directory,template_name,**kwargs):
  loader=FileSystemLoader(directory)
  env=Environment(loader=loader,line_comment_prefix=opt.line_comment,line_statement_prefix=opt.line_statement)
  for x in opt.extensions:
    ext=f"jinja2.ext.{x}"
    try:
      env.add_extension(ext)
    except:
      print(f"WARNING: Extension {ext!r} could not be loaded.",file=sys.stderr)
  try:
    template=env.get_template(template_name)
    s=template.render(**kwargs)
  except Exception as e:
    tb=sys.exc_info()[2]
    stack=traceback.extract_tb(tb) # Our list of traceback levels, upper to lower.
    if isinstance(e,(SyntaxError,TypeError,TemplateError)):
      f=stack[-1]
      print(f"{f.filename}({f.lineno}): {f.line}",file=sys.stderr)
      print(f"{e}",file=sys.stderr)
      sys.exit(1)
    else:
      raise
  return s

# Now let Jinja2 do all the heavy lifting.
s=render_from_template(template_dir,template_name,**variables)
print(s)
