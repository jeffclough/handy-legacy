#!/usr/bin/env python2

import argparse,os,re,sys,urllib
import english
from handy import die,getch
try:
  import pyqrcode as qr
except ImportError:
  die('Failed to import pyqrcode module. Consider running "pip install pypng pyqrcode".')


formats=('show','png','svg','terminal')
rgba1=re.compile(r'(?P<r>[0-9A-Fa-f])(?P<g>[0-9A-Fa-f])(?P<b>[0-9A-Fa-f])(?P<a>[0-9A-Fa-f])?')
rgba2=re.compile(r'(?P<r>[0-9A-Fa-f]{2})(?P<g>[0-9A-Fa-f]{2})(?P<b>[0-9A-Fa-f]{2})(?P<a>[0-9A-Fa-f]{2})?')

def get_color_tuple(color):
  "Return an (R,G,B,A) tuple from the string value of color."

  if len(color) in (3,4):
    m=rgba1.match(color)
    if m:
      c=m.groupdict()
      if c['a']==None:
        c.a='f'
      for x in c:
        c[x]=c[x]+c[x]
      return tuple([int(c[x],16) for x in 'rgba'])
    elif len(color) in (6,8):
      m=rgba2.match(color)
      if m:
        c=m.groupdict()
        if c.a==None:
          c.a='ff'
        return tuple([int(c[x],16) for x in 'rgba'])
  raise ValueError("Bad RGB[A] value: %r"%(color,))

# Handle command line stuff.
ap=argparse.ArgumentParser()
ap.add_argument('--file',action='store',default=None,help="""Write the QR code to this file. If it has no file extension, append ".png".""")
ap.add_argument('--force',action='store_true',default=False,help="""Overwrite the output file if it exists. No warning will be given.""")
ap.add_argument('--format',metavar='FMT',default=formats[0],choices=formats,help="""Output the QR code in this format. Choices are %s. Default is %s."""%(english.join(formats,'or'),formats[0]))
ap.add_argument('--scale',metavar='N',default=16,type=int,help="""Scale the qr code by this ammount. (default=%(default)s)""")
ap.add_argument('--margin',metavar='N',default=2,type=int,help="""Surround the QR code with this many "units" of background color. The QR standard is 4, but this program's default is %(default)s because that's really big.""")
ap.add_argument('--foreground',metavar='RGBA',action='store',default='000f',help="""RGBA (or RRGGBBAA) foreground color, which is normally %(default)s.""")
ap.add_argument('--background',metavar='RGBA',action='store',default='ffff',help="""RGBA (or RRGGBBAA) background color, which is normally %(default)s.""")
ap.add_argument('text',metavar='WORD',nargs='+',action='append',help="""This is the text that will be encoded into the QR code.""")
opt=ap.parse_args()

if False:
  print 'Raw color options:'
  print '  foreground: %s'%(opt.foreground,)
  print '  background: %s'%(opt.background,)

# Cook some option values.
opt.foreground=get_color_tuple(opt.foreground)
opt.background=get_color_tuple(opt.background)
opt.text=' '.join(opt.text[0])

# Make sure we have a filename if we need a filename.
if opt.format in ('png','svg'):
  if not opt.file:
    if any([x in opt.text for x in '.:/']):
      opt.file=urllib.quote_plus(opt.text,'')
    else:
      opt.file=''.join(opt.text.split())
    #print 'D: opt.file=%r'%(opt.file,)
  ext='.'+opt.format
  if not opt.file.endswith(ext):
    if opt.file.endswith('.'):
      opt.file+=opt.format
    else:
      opt.file+=ext
  if os.path.exists(opt.file) and not opt.force:
    if getch('%s already exists. Overwrite? '%opt.file,echo=True).lower()!='y':
      print 'Quitting.'
      sys.exit(0)

if False:
  print 'Options:'
  print '  file: %r'%(opt.file,)
  print '  format: %r'%(opt.format,)
  print '  scale: %r'%(opt.scale,)
  print '  margin: %r'%(opt.margin,)
  print '  foreground: %s'%(','.join(['%02x'%x for x in opt.foreground]))
  print '  background: %s'%(','.join(['%02x'%x for x in opt.background]))
  print '  text: %r'%(opt.text,)

# Do the QR stuff.
code=qr.create(opt.text)
if opt.format=='png':
  code.png(opt.file,scale=opt.scale,module_color=opt.foreground,background=opt.background,quiet_zone=opt.margin)
elif opt.format=='svg':
  code.svg(opt.file,scale=opt.scale,module_color=opt.foreground,background=opt.background,quiet_zone=opt.margin)
elif opt.format=='show':
  code.show(scale=opt.scale,module_color=opt.foreground,background=opt.background,quiet_zone=opt.margin)
elif opt.format=='show':
  code.terminal(module_color=opt.foreground,background=opt.background,quiet_zone=opt.margin)
