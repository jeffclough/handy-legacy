#!/usr/bin/env python3

# Turn on "true" division, the default in 3.0+, for /. Use the // operator
# to force "floor" divsion, which is classical integer division. But be
# aware that 1.0//2 == 0.0 under "true" division.


import copy,optparse,os,re,stat,sys,time,traceback
from OptionParserFormatters import IndentedHelpFormatterWithNL
from collections import namedtuple
from datetime import datetime,timedelta,tzinfo
from pprint import pformat
from debug import DebugChannel

def die(msg,rc=1):
  sys.stderr.write(os.path.basename(sys.argv[0])+': '+msg+'\n')
  sys.exit(rc)

#def debug(msg):
#  if opt.debug:
#    sys.stderr.write(os.path.basename(sys.argv[0])+' D: '+msg+'\n')

debug=DebugChannel(line_fmt='{label:.1s}: {basename}:{function}:{line}: {indent}{message}\n')
#debug(f"debug.fmt={debug.fmt!r}")

if sys.version_info>=(2,6):
  # Use the built-in str.format() method for formatting.
  def format(fmt,*args,**kwargs):
    return fmt.format(*args,**kwargs)
else:
  # Define a format(fmt,*args,**kwargs) for Python version < 2.6.
  debug('Defining our own format() function for Python %d.%d'%sys.version_info[:2])
  format_fieldspec=re.compile(r'{([0-9A-Za-z_]*)}')
  def format(fmt,*args,**kwargs):
    #print '---- args=%r, kwargs=%r'%(args,kwargs)
    # Get a list of fields in the format string: (start,end,id) tuples
    fields=[]
    i=0 # Empty fieldspecs ({}) will begin with field number 1.
    for m in format_fieldspec.finditer(fmt):
      id=m.group(1)
      if len(id)==0:
        i+=1
        id=i
      elif id.isdigit():
        i=id=int(id)
      else:
        i=len(fields)+1
      fields.append((m.start(),m.end(),id))
    for start,end,ndx in reversed(fields):
      if isinstance(ndx,int):
        if ndx>=0 and ndx<=len(args):
          fmt=fmt[:start]+args[ndx]+fmt[end:]
        else:
          fmt=fmt[:start]+fmt[end:]
      else:
        fmt=fmt[:start]+kwargs.get(ndx,'')+fmt[end:]
    return fmt

months=(
  'january',
  'february',
  'march',
  'april',
  'may',
  'june',
  'july',
  'august',
  'september',
  'october',
  'november',
  'december'
)

month_pattern='('+'|'.join([n[:3] for n in months])+')\w+'

def get_month_by_name(month_name):
  """Return a number from 1 to 12 corresponding to the given month name,
  or return None for an unrecognized month name. To make the caller's
  life easier, any string containing a number from 1 to 12 is also
  returned as the corresponding integer."""

  d=debug.enable(False)
  debug(f"month_name={month_name}").indent()
  try:
    n=int(month_name)
    debug(f"converting as integer to {n}")
    if n>=1 and n<=12:
      mnum=n
    else:
      debug(f"{n} is out of range")
      mnum=None
  except ValueError as e:
    n=len(month_name)
    if n<3:
      debug("{month_name!r} is too short to be a month name")
      mnum=None
    else:
      m=month_name.lower()
      debug(f"m={m!r}")

      for i in range(len(months)):
        if m==months[i][:n]:
          mnum=i+1
          break
      else:
        mnum=None
  debug.undent()(f"returning {mnum}")
  debug.enable(d)
  return mnum

def get_month_by_name_strict(month_name):
  """This is exactly the same as get_month_by_name(), bit it raises a
  ValueError exception if given a bad month name."""

  month=get_month_by_name(month_name)
  if month==None:
    raise ValueError('invalid month: %r'%(month_name,))
  return month

def formatted_relative_time(delta):
  """Return a string formatted as '[-][DAYSd ]HH:MM:SS' expressing the
  positive or negative number of seconds given in delta."""

  if isinstance(delta,timedelta):
    delta=total_seconds(delta)
  if delta<0:
    output='-'
    delta=-delta
  else:
    output=''
  if delta>=86400:
    output+='%dd '%(delta//86400)
    delta%=86400
  output+='%02d:%02d:%02d'%(delta//3600,(delta%3600)//60,delta%60)
  return output

def unique(seq,key=None,copy_depth=None):
  """Return a copy of seq where consecutive, identical values are folded
  into a single value. If present the key argument works like that of
  the standard sorted() function."""

  # Set c() as our local copy function.
  if copy_depth is None: c=lambda x:x
  elif copy_depth=='deep': c=copy.deepcopy
  elif copy_depth=='shallow': c=copy.copy
  else: raise ValueError("unique()'s copy_depth must be either None (the default), 'deep', or 'shallow'.")

  ret=[]
  prev=None
  for val in seq:
    v=val
    if key: v=key(val)
    if v==prev: continue
    ret.append(c(val))
    prev=v

  # Match our return type to seq's type if possible.
  if isinstance(seq,tuple): ret=tuple(ret)
  elif isinstance(seq,str): ret=''.join(ret)
  elif isinstance(seq,bytearray): ret=bytearray(ret)
  return ret

# Make sure we can get total_seconds() for a timedelta object, even if we're
# running on a pre-2.7 version of Python.
if sys.version_info<(2,7):
  def total_seconds(td):
    return (td.microseconds+(td.seconds+td.days*24*3600)*10**6)//10**6
else:
  def total_seconds(td):
    return td.total_seconds()

class TimeZone(tzinfo):
  "Make creating tzinfo objects simple and easy."

  def __init__(self,std_name,std_minutes=None,dst_name=None,dst_minutes=60):
    """Build a TimeZone object, which is also a tzinfo object.
    
    std_name:    Name of the time zone during the non-DST interval. If
                 std_itme is "local", the local time zone will be used,
                 and no further arguments are needed (and will be
                 ignored).

    std_minutes: Offset in minutes from UTC, positive for westward
                 offsets and negative for eastward.

    dst_name:    Name of the time zone during the DST interval. If not
                 given, it will be the same as std_name.

    dst_minutes: Offset in minutes from standard time to DST for this
                 time zone. This value is nearly always 60 (to "spring
                 forward one hour"), so it defaults to that value."""

    if std_name=='local':
      if len(time.tzname)>0:
        self.std_name=time.tzname[0]
      else:
        self.std_name=None
      if len(time.tzname)>1:
        self.dst_name=time.tzname[1]
      else:
        self.dst_name=self.std_name
      self.std_offset=timedelta(seconds=-time.timezone)
      if time.daylight:
        self.dst_offset=timedelta(seconds=-time.altzone)
      else:
        self.dst_offset=std_offset
    else:
      self.std_name=std_name
      self.std_offset=timedelta(minutes=std_minutes)
      self.dst_name=dst_name
      self.dst_offset=timedelta(minutes=std_minutes+dst_minutes)

  def __repr__(self):
    return 'TimeZone(%r,%r,%r,%r)'%(
      self.std_name,int(total_seconds(self.std_offset)//60),
      self.dst_name,int(total_seconds(self.dst_offset-self.std_offset)//60)
    )

  def __str__(self):
    if self.std_name==self.dst_name:
      return self.std_name
    return '%s%d%s'%(self.std_name,-total_seconds(self.std_offset)//3600,self.dst_name)

  def utcoffset(self,dt):
    if self.isDst(dt):
      return self.dst_offset
    return self.std_offset

  def tzname(self,dt):
    if self.isDst(dt):
      return self.dst_name
    return self.std_name

  def dst(self,dt):
    if self.isDst(dt):
      return self.dst_offset-self.std_offset
    return timedelta(0)

  def isDst(self,dt):
    """Return True if dt is in a DST interval. Let datetime and time do
    the heavy lifting."""

    # Compute the true UTC epoch seconds of dt.
    es=(dt.toordinal()-datetime.utcfromtimestamp(0).toordinal())*86400+dt.hour*3600+dt.minute*60+dt.second
    # Offset this for dt's timezone, and get the answer from localtime().
    return time.localtime(es-total_seconds(self.std_offset)).tm_isdst==1

tz_utc=TimeZone('UTC',0,'UTC',0)
    
# Make a list of time zones we recognize, including whatever the local time
# zone is. (Yes, I know UTC is not a time zone.)
# THE FIRST TIME ZONE IN THIS ARRAY IS USED AS THE DEFAULT TIME ZONE WHEN
# NONE IS GIVEN IN A STRING THAT'S BEING PARSED. BECAUSE OF THIS, MAKE SURE
# THAT THE "local" TIME ZONE IS LISTED FIRST!
time_zones=[
  TimeZone('local'), # This creates EST/DST for US Eastern time, and so forth.
  tz_utc,
  TimeZone('GMT',0,'BST'),
  TimeZone('EST',-5*60,'EDT'),
  TimeZone('CST',-6*60,'CDT'),
  TimeZone('MST',-7*60,'MDT'),
  TimeZone('PST',-8*60,'PDT'),
]
tz_default=time_zones[0]
now=datetime.now(tz_default)

# Make a dictionary of time zone names that map to the corresponding time zone.
zones_by_name={}
for z in time_zones:
  zones_by_name[z.std_name]=z
  zones_by_name[z.dst_name]=z

# Make a regular expression that matches any time zone name.
tz_pattern='('+'|'.join([z for z in sorted(zones_by_name.keys())])+')'

def get_tz_by_name(tz_name):
  "Return the named tzinfo object or terminate in error."

  if tz_name=='local':
    return time_zones[0]
  tz=zones_by_name.get(tz_name.upper())
  if tz==None:
    die('Unrecognized time zone: %r'%(tz_name,))
  return tz

# Make a list of 
epochs=dict(
  ms=datetime(1,1,1,0,0,0,0,tz_utc),
  ad=datetime(1601,1,1,0,0,0,0,tz_utc),
  cobol=datetime(1601,1,1,0,0,0,0,tz_utc),
  ntfs=datetime(1601,1,1,0,0,0,0,tz_utc),
  vms=datetime(1858,11,17,0,0,0,0,tz_utc),
  ntp=datetime(1900,1,1,0,0,0,0,tz_utc),
  excel=datetime(1900,1,1,0,0,0,0,tz_utc),
  unix=datetime(1970,1,1,0,0,0,0,tz_utc),
)
epoch_names=sorted(epochs.keys())

op=optparse.OptionParser(
  formatter=IndentedHelpFormatterWithNL(2,8),
  usage="%prog [OPTIONS] [arguments expressing date and time]",
  description="""The tread script (pronounced "T-read") reads a time expression in any of several formats and outputs it in a given (or default "YYYY-MM-DD hh:mm:ss") format.
  
%prog looks for the time to be parsed on the command line first and assumes that all arguments are part of a single time expression. If there are no command line arguments, but standard input is being redirected or piped, each line is parsed for a time. Failing that, the current time is used. Parsing from standard input is the only scenario that might output more than one time expression.
  
See the options below for output format help, including expressing time in various epochs and performing age calculations.""",
  epilog="""
EXAMPLES

    Get the current time in the default format.

        tread

        2015-10-07 11:13:42 EDT


    Get just the date in mm/dd/yyyy format.

        tread -f '%m/%d/%Y'

        10/07/2015


    Show all epoch time values for the current time.

        for e in ad cobol excel ms ntfs ntp unix vms; do
          printf "$e:\\t%11ld\\n" $(tread --epoch=$e)
        done

        ad:     13088711329
        cobol:  13088711329
        excel:   3653226529
        ms:     63579834529
        ntfs:   13088711329
        ntp:     3653226529
        unix:    1444237729
        vms:     4950954529

"""
)
op.add_option('--age',metavar='UNITS',dest='age',choices=('seconds','minutes','hours','days','time'),help="Request the age of the given date and time, and give the desired units (days, hours, minutes, or seconds). The 'time' units value gives an output format of '[-][DAYSd ]%HH:%MM:%SS'. Only integer values are returned, and there is no rounding. Future times return a negative age.")
op.add_option('--epoch',dest='epoch',choices=epoch_names,help="Output the number of seconds elapsed from the beginning of given epoch to the given time. Negative values are given for times that predate the epoch. Epoch choices: %s"%(', '.join(epoch_names)))
op.add_option('-f',dest='format',action='store',default='%Y-%m-%d %H:%M:%S %Z',help="Set format for turning times into strings. See 'man strptime' for the format syntax. (default: %default)")
op.add_option('-F',metavar='format',dest='output',action='store',default='{time}',help="""Set the format for outputting the parsed time, which might include parts of the string from which the time was not parsed. The parts of any parsed string are "before", "matched", "after", and "time" (the parsed and formatted version of "matched"). (default: %default")""")
op.add_option('--future',dest='assume_past',action='store_false',default=True,help="Assume dates with missing years refer to the future. The default is to assume they refer to a past date.")
op.add_option('-t',metavar='TZ',dest='transpose',action='store',default=None,help="Transpose the parsed time to a new time zone. \"local\" may be used to identify the local time zone. This option does NOT transpose between standard time and DST, only between time zones. Note also and UTC is ALWAYS on standard time.")
op.add_option('--tzlist',dest='tzlist',action='store_true',default=False,help="Show a list of time zones this program knows about and quit.")
op.add_option('--allow-bad-data',dest='allow_bad_data',action='store_true',default=None,help="Output lines containing no discernible time value.")
op.add_option('--where',dest='where',type='choice',choices=('beginning','start','whole','end'),default=None,help="""Say where to allow the date and time to appear in the given text. This can be any one of "start", "beginning", "whole", or "end". "start" and "beginning" are synonymous, and "whole" means that ONLY the date and time may appear in the given text.""")
op.add_option('--debug',dest='debug',action='store_true',help="Presents output only a developer could love.")
opt,args=op.parse_args()

# Handle --debug.
if opt.debug:
  debug.enable()

  for n in sorted(zones_by_name.keys()):
    debug('%s: %r'%(n,zones_by_name[n]))

if opt.tzlist:
  for z in unique(
    sorted(time_zones,key=lambda z:(z.std_offset,z.std_name)),
    key=lambda z:z.std_name
  ):
    print('%s/%s: %s/%s'%(
      z.std_name,z.dst_name,
      formatted_relative_time(z.std_offset),formatted_relative_time(z.dst_offset)
    ))
  sys.exit(0)

if opt.epoch!=None:
  opt.epoch=epochs[opt.epoch]
  if opt.age==None:
    # Because the --age logic is going to do most of --epoch's work.
    opt.age='seconds'

if opt.transpose:
  opt.transpose=get_tz_by_name(opt.transpose)

# Parsers return ParsedTime values.
ParsedTime=namedtuple('ParsedTime','before matched after dt')

class ParserBase(object):
  """This is the base class of all other time parsers. Treat it as an
  abstract base class."""

  # This is the name of the format this parser parses.
  name=''

  # This is a sequence of compiled REs. This parser can parse only strings
  # that match one of these REs in their entirety.
  patterns=[
  ]

  # Parse the given string and return an object representing that time. If
  # the string cannot be parsed, return None.
  def parse(time_string):
    """Return a (BEFORE,DT,AFTER) tuple from the string containing a
    time value.

    BEFORE:  The portion of time_string before the time was found.
    MATCHED: The portion of time_string containing the time.
    AFTER:   The portion of time_string after the time was found.
    DT:      The datetime.datetime value of the time parsed from the
             string.
            
    If no time is found in time_string, a value of
    ParsedTime('','','',None) is returned."""

    return ParsedTime('','','',None)

class DateTimeParser(ParserBase):

  name="Full Date and Time"
  patterns=[
  # mm-dd-YY HH:MM:SS
    r'\b'
    r'(?P<month>\d{1,2})[-/]'
    r'(?P<day>\d{1,2})[-/]'
    r'((?P<year>\d{2}))\s+'
    r'(?P<hour>\d+):'
    r'(?P<minute>\d+):'
    r'(?P<second>\d+)'
    r'(\s+(?P<tz>'+tz_pattern+r'))?'
    r'\b',
  # YYYY-mon-dd HH:MM:SS
    r'\b'
    r'((?P<year>\d{4})[-/])'
    r'(?P<month>[A-Za-z]{3,9})[-/]'
    r'(?P<day>\d{1,2})\s+'
    r'(?P<hour>\d+):'
    r'(?P<minute>\d+):'
    r'(?P<second>\d+)'
    r'(\s+(?P<tz>'+tz_pattern+r'))?'
    r'\b',
  # YYYY-mm-dd HH:MM:SS
    r'\b'
    r'((?P<year>\d{4})[-/])'
    r'(?P<month>\d{1,2})[-/]'
    r'(?P<day>\d{1,2})\s+'
    r'(?P<hour>\d+):'
    r'(?P<minute>\d+):'
    r'(?P<second>\d+)'
    r'(\s+(?P<tz>'+tz_pattern+r'))?'
    r'\b',
  # [dow] mmm dd hh:mm:ss [tz] yyyy
    r'\b'
    r'((?P<dow>(sun|mon|tue|wed|thu|fri|sat)\w*)\s+)?'
    #r'(?P<month>'+month_pattern+')\s+'
    r'(?P<month>\w+)\s+'
    r'(?P<day>\d+)\s+'
    r'(?P<hour>\d+):'
    r'(?P<minute>\d+):'
    r'(?P<second>\d+)'
    r'(\s+(?P<tz>'+tz_pattern+r'))?'
    r'(\s+(?P<year>\d+))?'
    r'\b',
  ]
  # Cook and compile these patterns according to command line options.
  if opt.where in ('whole','end'):
    patterns=[p+'$' for p in patterns]
  if opt.where in ('beginning','start','whole'):
    patterns=['^'+p for p in patterns]
  patterns=[re.compile(p,re.IGNORECASE) for p in patterns]

  def validate(self,match):
    """Given a regular expression match object, return a datetime object
    if the matched values are valid date and time values. Otherwise,
    return None."""

    debug(f"named groups: {match.groupdict()}").indent()

    # Create an object with the named groups in this match object as attributes.
    d=type('',(),match.groupdict())

    try:
      no_year=not d.year 
      d.year=int(d.year) if d.year else now.year
      d.month=get_month_by_name_strict(d.month)
      d.day=int(d.day) if d.day else None
      d.hour=int(d.hour) if d.hour else 0
      d.minute=int(d.minute) if d.minute else 0
      d.second=int(d.second) if d.second else 0
      d.tz=zones_by_name[d.tz.upper()] if d.tz else time_zones[0]
      debug('values: %(year)r-%(month)r-%(day)r %(hour)r:%(minute)r:%(second)r %(tz)r'%d.__dict__)
      dt=datetime(
        d.year,d.month,d.day,
        d.hour,d.minute,d.second,0,d.tz
      )
      debug(f"dt={dt}")
      if dt.year<100:
        # Allow the time assumed from missing century information to go only 80
        # years into the past. Otherwise, assume the century following that. And
        # yes, I'm aware I've bent over backward to ensure this logic will
        # continue to be correct beyond the 3rd millennium AD. (If you're
        # reading this in the year 2999, your welcome, but *WHY* are you still
        # dealing with years expressed as 2 digits!? Isn't everyone
        # cybernetically merged into a collective consciousness by now, thus
        # obviating this type of logic entirely? If not, you should definitely
        # get on that.)
        divider=datetime(
          now.year-80,now.month,now.day,now.hour,now.minute,now.second,
          now.microsecond,now.tzinfo
        )
        dt=datetime(
          dt.year+((now.year//1000)*1000)-100,dt.month,dt.day,dt.hour,dt.minute,dt.second,
          dt.microsecond,dt.tzinfo
        )
        if dt<divider:
          dt=datetime(
            dt.year+100,dt.month,dt.day,dt.hour,dt.minute,dt.second,
            dt.microsecond,dt.tzinfo
          )
      if no_year and opt.assume_past and dt>datetime.now(d.tz):
        # Re-interpret of Feb 29 validation.
        debug('subtracting one year ...')
        dt=datetime(
          d.year-1,d.month,d.day,
          d.hour,d.minute,d.second,0,d.tz
        )
      debug.undent()(f"returning {dt!r}")
      return dt
    except (TypeError,ValueError) as e:
      debug(traceback.format_exc())
      debug.undent()("returning None")
      return None

  def parse(self,time_string):
    """Return a (possibly empty) list of plausible interpretations of
    the value in time_string. Each item in the list is a
    (before,matched,after,time) tuple."""

    debug("time_string=%r"%time_string).indent()
    matches=[]
    for p in self.patterns:
      debug("pattern='%s'"%p.pattern)
      m=p.search(time_string)
      if m:
        debug("match=%r"%m.groupdict())
        dt=self.validate(m)
        if dt:
          # Add this datetime to our matchs.
          matches.append(
            ParsedTime(
              time_string[:m.start()],        # Before the match.
              time_string[m.start():m.end()], # The matched text.
              time_string[m.end():],          # After the match.
              dt                              # The datetime value.
            )
          )

    debug.undent()(f"returning {pformat(matches,width=50)}")
    return matches

class DateParser(ParserBase):

  name="Just the Date"
  patterns=[
  # mm-dd-YY
    r'\b'
    r'(?P<month>\d{1,2})[-/]'
    r'(?P<day>\d{1,2})[-/]'
    r'((?P<year>\d{2}))'
    r'\b',
  # YYYY-mon-dd
    r'\b'
    r'((?P<year>\d{4})[-/])'
    r'(?P<month>[A-Za-z]{3,9})[-/]'
    r'(?P<day>\d{1,2})'
    r'\b',
  # YYYY-mm-dd
    r'\b'
    r'((?P<year>\d{4})[-/])'
    r'(?P<month>\d{1,2})[-/]'
    r'(?P<day>\d{1,2})'
    r'\b',
  # [dow] mmm dd [tz] yyyy
    r'\b'
    r'((?P<dow>(sun|mon|tue|wed|thu|fri|sat)\w*)\s+)?'
    #r'(?P<month>'+month_pattern+')\s+'
    r'(?P<month>\w+)\s+'
    r'(?P<day>\d+)\s+'
    r'(\s+(?P<year>\d+))?'
    r'\b',
  ]
  # Cook and compile these patterns according to command line options.
  if opt.where in ('whole','end'):
    patterns=[p+'$' for p in patterns]
  if opt.where in ('beginning','start','whole'):
    patterns=['^'+p for p in patterns]
  patterns=[re.compile(p,re.IGNORECASE) for p in patterns]

  def validate(self,match):
    """Given a regular expression match object, return a datetime object
    if the matched values are valid date and time values. Otherwise,
    return None."""

    # Create an object with the named groups in this match object as attributes.
    debug(f"named groups: {match.groupdict()}").indent()
    d=type('',(),match.groupdict())

    try:
      no_year=not d.year 
      d.year=int(d.year) if d.year else now.year
      d.month=get_month_by_name_strict(d.month)
      d.day=int(d.day) if d.day else None
      d.hour=0
      d.minute=0
      d.second=0
      d.tz=time_zones[0]
      debug('time values: %(year)r-%(month)r-%(day)r %(hour)r:%(minute)r:%(second)r %(tz)r'%d.__dict__)
      dt=datetime(
        d.year,d.month,d.day,
        d.hour,d.minute,d.second,0,d.tz
      )
      debug(f"dt={dt}")
      if dt.year<100:
        # Allow the time assumed from missing century information to go only 80
        # years into the past. Otherwise, assume the century following that. And
        # yes, I'm aware I've bent over backward to ensure this logic will
        # continue to be correct beyond the 3rd millennium AD. (If you're
        # reading this in the year 2999, your welcome, but *WHY* are you still
        # dealing with years expressed as 2 digits!? Isn't everyone
        # cybernetically merged into a collective consciousness by now, thus
        # obviating this type of logic entirely? If not, you should definitely
        # get on that.)
        divider=datetime(
          now.year-80,now.month,now.day,now.hour,now.minute,now.second,
          now.microsecond,now.tzinfo
        )
        dt=datetime(
          dt.year+((now.year//1000)*1000)-100,dt.month,dt.day,dt.hour,dt.minute,dt.second,
          dt.microsecond,dt.tzinfo
        )
        if dt<divider:
          dt=datetime(
            dt.year+100,dt.month,dt.day,dt.hour,dt.minute,dt.second,
            dt.microsecond,dt.tzinfo
          )
      if no_year and opt.assume_past and dt>datetime.now(d.tz):
        # Re-interpret of Feb 29 validation.
        debug('subtracting one year ...')
        dt=datetime(
          d.year-1,d.month,d.day,
          d.hour,d.minute,d.second,0,d.tz
        )
      debug.undent()(f"returning {dt}")
      return dt
    except (TypeError,ValueError) as e:
      debug(traceback.format_exc())
      debug.undent()("returning None")
      return None

  def parse(self,time_string):
    """Return a (possibly empty) list of plausible interpretations of
    the value in time_string. Each item in the list is a
    (before,matched,after,time) tuple."""

    debug(f"time_string={time_string}").indent()
    matches=[]
    for p in self.patterns:
      debug(f"pattern={p.pattern}")
      m=p.search(time_string)
      if m:
        debug(f"match={m.groupdict()}")
        dt=self.validate(m)
        if dt:
          # Add this datetime to our matchs.
          matches.append(
            ParsedTime(
              time_string[:m.start()],        # Before the match.
              time_string[m.start():m.end()], # The matched text.
              time_string[m.end():],          # After the match.
              dt                              # The datetime value.
            )
          )
    debug.undent()(f"returning {pformat(matches,width=50)}")
    return matches

parsers=(
  DateTimeParser(),
  DateParser(),
)

def parse_time(time_string):
  """Parse the time string in every plausible way. If more than one
  solution presents itself, choose the best one and return it."""

  d=debug.enable(False)
  debug(f"time_string={time_string!r}").indent()
  possibles=[]
  for p in parsers:
    l=p.parse(time_string)
    if len(l)>0:
      possibles.extend(l)
  if len(possibles)>1:
    # Discard possibles with matching time strings shorter than the
    # longest one.
    debug(f"possibles={pformat(possibles,width=50)}")
    possibles.sort(key=(lambda pt:len(pt.matched)),reverse=True)
    l=len(possibles[0].matched)
    possibles=[pt for pt in possibles if len(pt.matched)==l]
    debug(f"keeping {pformat(possibles,width=50)}")
  if len(possibles)==1:
    debug("Found exactly one match.")
    m=possibles[0]
  elif len(possibles)==0:
    debug("Found zero matches.")
    # Bear in mind opt.allow_bad_data can be None, True, or False.
    if not opt.allow_bad_data==False:
      die("Couldn't parse time: %r"%time_string)
    if opt.allow_bad_data==True:
      m=ParsedTime('',time_string,'',None)
    else:
      m=ParsedTime('','','',None)
  if len(possibles)>1:
    die('Too many possibilities.')
  else:
    debug(f"returning {m!r}").enable(d)
    return m

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

def get_input():
  """This is a generator function that returns the string of
  concatenated command line arguments. Failing that, it returns each
  line of standard input (one at a time). Failing that, it returns the
  current time in "YYYY-mm-dd HH:MM:SS TZ" format. Only reading from
  standard input can ever yield more than one input string."""

  if args:
    # Use command line arguments if available.
    debug('Joining %r as %r'%(args,' '.join(args)))
    yield ' '.join(args)
  else:
    # If no args, maybe there's something on stdin.
    debug('Checking stdin for content ...')
    mode=os.fstat(sys.stdin.fileno()).st_mode
    if stat.S_ISFIFO(mode) or stat.S_ISREG(mode):
      debug('Reading stdin ...')
      if opt.allow_bad_data==None:
        opt.allow_bad_data=True
      for time_string in sys.stdin:
        yield time_string.rstrip()
    else:
      # Use the current time if none is given.
      debug('Using current time.')
      yield now.strftime('%Y-%m-%d %H:%M:%S %Z')

debug('Starting main loop ...')
for time_string in get_input():
  pt=parse_time(time_string)
  debug(f"pt={pt}")
  if pt.dt:
    if opt.epoch==None:
      delta=None
    else:
      ##
      ## Handle --epoch, which is really just some pre-processing for --age.
      ##
      delta=int(total_seconds(pt.dt-opt.epoch))
    debug('opt.age=%r'%(opt.age,))
    if opt.age!=None:
      ##
      ## Handle --age.
      ##
      if delta==None:
        debug('Computing delta as %s - %s'%(datetime.now(pt.dt.tzinfo),pt.dt))
        delta=int(total_seconds(datetime.now(pt.dt.tzinfo)-pt.dt))
      debug(f"  now:   {datetime.now(pt.dt.tzinfo)}")
      debug(f"  dt:    {pt.dt}")
      debug(f"  delta: {delta}")
      if delta<0:
        output='-'
        delta=-delta
      else:
        output=''
      if opt.age=='seconds': output+=str(delta)
      elif opt.age=='minutes': output+=str(delta//60)
      elif opt.age=='hours': output+=str(delta//3600)
      elif opt.age=='days': output+=str(delta//86400)
      else: output+=formatted_relative_time(delta)
      print(output)
    else:
      ##
      ## Output the reformated time that we've parsed.
      ##
      if opt.transpose:
        #debug('pt.dt=%r'%(pt.dt,))
        #debug('opt.transpose=%r'%(opt.transpose,))
        nt=datetime(
          pt.dt.year,pt.dt.month,pt.dt.day,pt.dt.hour,pt.dt.minute,pt.dt.second,
          pt.dt.microsecond,opt.transpose
        )
        #debug('nt=%r'%(nt,))
        offset=dt-nt
        #debug('offset=%r'%(offset,))
        pt.dt+=offset
        pt.dt=datetime(
          pt.dt.year,pt.dt.month,pt.dt.day,pt.dt.hour,pt.dt.minute,pt.dt.second,
          pt.dt.microsecond,opt.transpose
        )
      print(format(opt.output,**dict(
        before=pt.before,
        matched=pt.matched,
        after=pt.after,
        time=pt.dt.strftime(opt.format)
      )))
  elif opt.allow_bad_data==True:
    print(pt.before)
  else:
    print('Unrecognized date/time: %r'%time_string)
