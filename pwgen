#!/usr/bin/env python2

import base64,optparse,random,re,string,sys
try:
  from OptionParserFormatters import IndentedHelpFormatterWithNL
except:
  IndentedHelpFormatterWithNL=optparse.IndentedHelpFormatter

debug_indent=0
def debug(msg,**kwargs):
  global debug_indent

  if opt.debug:
    # Get our keyword arguments.
    output=kwargs.get('output',sys.stdout)
    indent=kwargs.get('indent')

    # Handle any indenture changes.
    if indent!=None:
      if indent==0:
        debug_indent=0
      else:
        debug_indent=max(0,debug_indent+indent)
    if msg!=None:
      output.write('D: '+('  '*debug_indent)+msg+'\n')

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Set up and handle the command line.

# Define some password rule sets, marking one of them as the default, and
# remember which one that is.
rule_sets=dict(
  default=dict( # This is the default, general-purpose, rule set.
    binary=None,
    classes='Aa1',
    dictionary=False,
    format='text',
    min_length=11,
    max_length=15,
    capitalize=False,
    pronounceable=False,
    typable=False,
    unambiguous=False,
    default=True # <--- Identifies this dictionary as the default values.
  ),
  gt=dict( # For working with GT account holders.
    binary=None,
    classes='A{1,1}a1{1,1}',
    dictionary=False,
    format='text',
    min_length=11,
    max_length=11,
    capitalize=True,
    pronounceable=False,
    typable=False,
    unambiguous=True,
  ),
  iam=dict( # For IAM connectivity password values.
    binary=None,
    classes='Aa1',
    dictionary=False,
    format='base64',
    min_length=24,
    max_length=32,
    capitalize=False,
    pronounceable=False,
    typable=False,
    unambiguous=False,
  ),
  guest=dict( # For guest password values.
    binary=None,
    classes='Aa1',
    dictionary=True,
    format='text',
    min_length=11,
    max_length=22,
    capitalize=False,
    pronounceable=False,
    typable=False,
    unambiguous=False,
  )
)
rule_set_names=tuple(sorted(rule_sets.keys()))
default_rule_set=None
for rsn,rs in rule_sets.items():
  if rs.get('default'):
    default_rule_set=rsn
rules=type('',(),rule_sets[default_rule_set])

op=optparse.OptionParser(
  formatter=IndentedHelpFormatterWithNL(2,8),
  usage='''\
  %prog [options] [N]

Description:
  This command produces a single string of random characters according to the
  options given and writes it to standard output. Such strings are useful as
  passwords.
  
  If the N argument is given, that number of random strings will be output,
  one per line. Otherwise, a single password will be output.
'''
)

op.add_option('--bin',dest='binary',action='store_const',const=8,default=rules.binary,help="""Generate a binary password of 8-bit characters. You should redirect output to a file and/or use the "--format base64" option to avoid spewing random binary crap to your terminal with this option.""")
op.add_option('--bin16',dest='binary',action='store_const',const=16,default=rules.binary,help="""Generate a binary password of 16-bit characters. You should redirect output to a file and/or use the "--format base64" option to avoid spewing random binary crap to your terminal with this option.""")
op.add_option('-c','--capitalize',dest='capitalize',action='store_true',default=rules.capitalize,help="Capitalize ONLY the first character of the generated password, which incidently forces the first character to be an alphabetic character. (default: %default)")
op.add_option('--classes',dest='classes',action='store',default=rules.classes,help="""The CLASSES value, which defaults to \"%default\", should contain one character from each character class (lower case, upper case, numerals, and punctuation) that must appear in the generated string.

The format of this option's argument is '(C[{N[,M]}]) ...'. C is a character from the desired characer class (e.g. A-Z for upper case, 0-9 for digits, etc.), N is the minimum number of caracters from from that class (defauls to 1), and M is the maximum number (defaults to --max's value). The (, [, ], and ) are the usual BNF syntax elements. If {N[,M]} is not given, N defaults to 1, and M defauls to --max's value. For example, an argument of Aa9: is the same as Aa9{1}:{1}, but you can use Aa9{1,1}:{1,1} to require at least one and allow no more than one digit and punctuation (each) in a generated password.""")
op.add_option('-d','--dictionary',dest='dictionary',action='store_true',default=rules.dictionary,help="Use the system dictionary to compose the random password.")
op.add_option('--debug',dest='debug',action='store_true',default=False,help='For output only a developer could love.')
op.add_option('-f','--format',dest='format',action='store',choices=('base64','hex','text'),default='text',help="Choose the output format (base64, hex, or text) of the generated password(s). Text output yields one password per line unless --bin or --bin16 is given, in which case text output yields binary output with terminating nulls (8- or 16-bit values, depending on the option given) after each password. (default: %default)")
op.add_option('-m','--min',dest='min_length',type='int',action='store',default=rules.min_length,help="Minimum length of the generated random string. If --min is greater than --max, --min takes precedence. (default: %default)")
op.add_option('-M','--max',dest='max_length',type='int',action='store',default=rules.max_length,help="Maximum length of the generated random string. If --min is greater than --max, --min takes precedence. (default: %default)")
op.add_option('-p','--pronounceable',dest='pronounceable',action='store_true',default=rules.pronounceable,help="Generates random passwords, but ensures that they can be spoken (in english). May be combined with -t (--typable).")
op.add_option('-r','--rules',dest='rules',action='store',choices=rule_set_names,default=None,help="Specify what rule set (choose from %s) to apply when generating passwords, obviating any other options that might be given before or after this one."%(', '.join(rule_set_names)))
op.add_option('-t','--typable',dest='typable',action='store_true',default=rules.typable,help="Generates random passwords, but ensures they they can be typed easily (on a QWERTY keyboard). May be combined with -p (--pronounceable).")
op.add_option('-u','--unambiguous',dest='unambiguous',action='store_true',default=rules.unambiguous,help="Don't use characters that are easily misread.")
opt,args=op.parse_args()

if opt.debug:
  debug('Before testing for rules ...')
  debug('    binary: %r'%(opt.binary))
  debug('    capitalize: %r'%(opt.capitalize))
  debug('    classes: %r'%(opt.classes))
  debug('    dictionary: %r'%(opt.dictionary))
  debug('    format: %r'%(opt.format))
  debug('    min_length: %r'%(opt.min_length))
  debug('    max_length: %r'%(opt.max_length))
  debug('    pronounceable: %r'%(opt.pronounceable))
  debug('    rules: %r'%(opt.rules))
  debug('    typable: %r'%(opt.typable))
  debug('    unambiguous: %r'%(opt.unambiguous))

# Apply any rule set that may have been given.
if opt.rules:
  debug('Applying rules ...')
  for o,v in rule_sets[opt.rules].items():
    debug(    '%s=%r'%(o,v))
    setattr(opt,o,v)

if opt.debug:
  debug('After processing rules (if given) ...')
  debug('    binary: %r'%(opt.binary))
  debug('    capitalize: %r'%(opt.capitalize))
  debug('    classes: %r'%(opt.classes))
  debug('    dictionary: %r'%(opt.dictionary))
  debug('    format: %r'%(opt.format))
  debug('    min_length: %r'%(opt.min_length))
  debug('    max_length: %r'%(opt.max_length))
  debug('    pronounceable: %r'%(opt.pronounceable))
  debug('    rules: %r'%(opt.rules))
  debug('    typable: %r'%(opt.typable))
  debug('    unambiguous: %r'%(opt.unambiguous))

# Ensure that max_length>=min_length.
if opt.min_length>opt.max_length:
  opt.max_length=opt.min_length

if opt.debug:
  debug('Final min=%r, max=%r'%(opt.min_length,opt.max_length))

# If we're capitalizing only the first character of the password, ensure
# that our character classes exclude upper-case characters.
#if opt.capitalize:
#  opt.classes=filter(lambda c:not c.isupper(),opt.classes)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

if opt.dictionary:
  # Find our word list on disk.
  dfiles=['/usr/share/dict/words','/usr/share/lib/dict/words']
  while len(dfiles)>0:
    fn=dfiles.pop(0)
    try:
      f=open(fn,'r')
      break
    except:
      if len(dfiles)>0:
        continue
      raise RandomString.Error('Cannot find dictionary (words) file on disk.')
  # Get a list of lower-case words without funny characters and
  # with a length from 5 to 8 characters.
  words=[
    x for x in [w.strip() for w in f]
      if 5<=len(x)<=8 and x.islower() and x.isalpha()
  ]
  # Clean up our housekeeping variables.
  del f,fn,dfiles

# Supply an all(seq) function if we don't have one.
try:
  all
except NameError:
  def all(seq):
    "Implement the all() built-in function intruduced in Python 2.5."

    for x in seq:
      if not x:
        return False
    return True

# Supply an any(seq) function if we don't have one.
try:
  any
except NameError:
  def any(seq):
    "Implement the any() built-in function intruduced in Python 2.5."

    for x in seq:
      if x:
        return True
    return False

# Supply a Set class and set() function if we don't have them.
try:
  set
except NameError:
  class Set(object):
    """This is a very partial replacement for the set type introduced in
    Python 2.4"""

    def __init__(self,seq):
      "Initialize this set with the items in the given sequence."

      self.d={} # We'll fake a set with the keys of a dict.
      for val in seq:
        self.d[val]=None

    def __len__(self):
      "Return the number of items in this set."

      return len(self.d)

    def __contains__(self,val):
      "Return True if val is in this set."

      return val in self.d

    def __repr__(self):
      return 'set(['+', '.join([repr(val) for val in self.d.keys()])+'])'

    def __str__(self):
      return repr(self)

    def add(self,val):
      "Add the value to our set."

      self.d[val]=None

    def remove(self,val):
      "Remove the value from our set. Raise KeyError if there's no such value."

      del self.d[val]

  def set(seq):
    "Return a new set containing the elements of the given sequence."

    s=Set(seq)
    return s

def random_ireplacer(s,mdict,n=1):
  """Replace  up to 1 (by default) randomly chosen character in s
  according to the map in the given dictionary. If n==-1, ALL possible
  substitutions are performed. The resulting string value is
  returned. This is a case-insensitive version of this function, and as
  such, any upper-case key values in mdict will be ignored.

  Ex: Perform a l337 replacement.

  >> mapper=dict(a='4',e='3',i='1',o='0',s='5',t='7',z='2')
  >> random_ireplacer('This is a test.',mapper)
  'Th1s is a test.'
  """

  ls=s.lower()
  if n==-1:
    return ''.join([mdict.get(ls[i],s[i]) for i in range(len(s))])
  klist=mdict.keys()
  indices=[i for i in range(len(s)) if ls[i] in klist]
  while indices and n>0:
    i=random.choice(indices)
    s=s[:i]+mdict[ls[i]]+s[i+1:]
    indices.remove(i) # Only one substitution per character position.
    n-=1
  return s

def dump_character_classes():
  "Show all character classes."

  debug("Character classes:")
  debug(None,indent=1)
  for cc in RandomString.CharacterClass.classes.values():
    debug(repr(cc))
  debug(None,indent=-1)

# These variables are used for pronounceable passwords.
consonents='b bl br c cl cr d dl dr f fr fl g gl gr h j k kl kr l m n p ph pl pr qu r s sh sl t v vl x z'.split()
vowels='a e i o u y'.split()
endings='b b c ck ct d f fk ft g j k kle kt l lk lt m mb mc md mk mp mt mv mz n nb nc nd nk np nt nv nz p ph ple r rk rkle rt s sh sl tle v ve vle x z'.split()
digit_mapper=dict(a='4',e='3',i='1',o='0',s='5',t='7',z='2')
punct_mapper=dict(a='@',c='<',d=']',g='&',h='#',k='<',l='!',s='$',t='?',v='>')

# Cook up some character class data based on the user's options.
class RandomString(object):

  class Error(Exception):
    'RandomString objects complain with this exception type.'

    pass

   # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ##
  ## RandomString.CharacterClass
  ## 

  class CharacterClass(object):
    """Provide a simple interface to a single character class. Such an
    object knows its members and minimum and maximum occurrances withing
    a password. It can be queried for a random member character, and it
    keep track how many times this has happened. Requesting more than
    the maximum number of characters from a given class will return a
    value of None."""

     # # # # # # # # # # # # # # # # #
    # # # # # # # # # # # # # # # # # #
    # Class attributes.

    cc_strings=(
      '9012345678',
      'abcdefghijklmnopqrstuvwxyz',
      'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      '?-!@#$%^&*()=_+~[]{}|;:,./<>', # I've left out backslash and all quotes.
      ' '
    )
    first=None
    classes={} # This is a dictionary of all CharacterClass instances.

    @classmethod
    def choice(cls):
      "Return a random character class instance."

      return cls.classes[random.choice(cls.classes.keys())]

    @classmethod
    def resetAll(cls):
      "Reset the count of EVERY character classes."

      debug("CharacterClass.resetAll() ...")
      debug(None,indent=1)
      for cc in cls.classes.values():
        debug('before: %r'%(cc,))
        cc.resetCount()
        debug('after:  %r'%(cc,))
      debug(None,indent=-1)

    # End of class attributes.
    # # # # # # # # # # # # # # # # # #
     # # # # # # # # # # # # # # # # #

    def __init__(self,sample,min_count,max_count):
      debug('CharacterClass(%r,%r,%r) ...'%(sample,min_count,max_count))
      self.members=None
      for cc_members in RandomString.CharacterClass.cc_strings:
        if sample in cc_members:
          self.members=cc_members
          break
      if self.members==None:
        raise RandomString.Error("Bad Character class sample: %r"%sample)
      if min_count==None:
        self.min_count=1
      else:
        self.min_count=min_count
      if max_count==None:
        self.max_count=opt.max_length
      else:
        self.max_count=max_count
      # Clear the number of times this character class has been sampled.
      self.resetCount()
      # Add this new CharacterClass object to the dictionary of all such objects,
      # keyed by the first character in its members string.
      RandomString.CharacterClass.classes[self.members[0]]=self
      # Also remember the FIRST CharacterClass that's defined.
      if RandomString.CharacterClass.first==None:
        RandomString.CharacterClass.first=self
      debug('Created CharacterClass object %r'%(self.getName(),))

    def __repr__(self):
      return "RandomString.CharacterClass(%r,%r,%r)=%r (count=%r)"%(self.members[0],self.min_count,self.max_count,self.members,self.count)

    def __int__(self):
      """Return the number of samples already taken from this character
      class."""

      return self.count

    def isAlpha(self):
      "Return True iff this character class holds alphabetic characters."

      return self.members[0].is_alpha()

    def isLower(self):
      return self.members[0].islower()

    def isUpper(self):
      return self.members[0].isupper()

    def isDigit(self):
      return self.members[0].isdigit()

    def isSpace(self):
      return self.members[0].isspace()

    def isSpecial(self):
      "Special characters are anything not any of the other categories."

      return not(self.isAlpha() or self.isLower() or self.isUpper() or self.isDigit() or self.isSpace());

    def getName(self):
      "Return the name of this character class."

      if self.members:
        return '%s{%r,%r}'%(self.members[0],self.min_count,self.max_count)
      return None

    def getTag(self):
      "Return the first character of this character class."

      if self.members:
        return self.members[0]
      return None

    def getCharacter(self):
      """Return a random character from this CharacterClass unless we're
      maxed out."""

      if self.count>=self.max_count:
        return None
      self.count+=1
      return random.choice(self.members)

    def resetCount(self):
      "Reset this CharacterClass's count to 0."

      self.count=0

  ##
  ## End of RandomString.CharacterClass
  ## 
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # A RE for parsing a character class specification.
  ccspec=re.compile(r'((.)(?:{(\d+)(?:,(\d+))?})?)')

  def __init__(self,character_classes='A{1}a{10}9',min_length=None,max_length=None):
    'Set up this character class according to the given spec.'

    # Create the CharacterClass objects according to the caller's spec.
    debug('Parsing character classes from %r ...'%character_classes)
    debug(msg=None,indent=1)
    for spec,ch,min_count,max_count in RandomString.ccspec.findall(character_classes):
      debug('RAW:    spec=%r ch=%r min_count=%r max_count=%r'%(spec,ch,min_count,max_count))
      if min_count=='':
        self.min_count=1
      else:
        try:
          self.min_count=int(min_count)
        except:
          raise RandomString.Error('Bad character class spec: %r: %r is not an integer'%(spec,min_count))
      if max_count=='':
        self.max_count=opt.max_length
      else:
        try:
          self.max_count=int(max_count)
        except:
          raise RandomString.Error('Bad character class spec: %r: %r is not an integer'%(spec,max_count))
      debug('COOKED: spec=%r ch=%r min_count=%r max_count=%r'%(spec,ch,self.min_count,self.max_count))

      if self.max_count<self.min_count:
        raise RandomString.Error('Bad character class spec: %r: %d<%d'%(spec,min_count,max_count))
      cc=RandomString.CharacterClass(ch,self.min_count,self.max_count)
      if not cc.getTag():
        raise RandomString.Error('Bad character class spec: %r: invalid character: %r'%(spec,ch))
    debug(msg=None,indent=-1)

    # Make note of what character classes we're set up to use.
    self.use_upper='A' in RandomString.CharacterClass.classes
    self.use_lower='a' in RandomString.CharacterClass.classes
    self.use_digit='9' in RandomString.CharacterClass.classes
    self.use_punct='?' in RandomString.CharacterClass.classes
    self.use_space=' ' in RandomString.CharacterClass.classes

    # Adjust our character classes if --capitalized is in effect.
    if opt.capitalize:
      if self.use_upper:
        cc_upper=RandomString.CharacterClass.classes['A']
        if not self.use_lower:
          # Create a lowercase character class in place of the uppercase one.
          RandomString.CharacterClass('a',cc_upper.min_count,cc_upper.max_count)
        del RandomString.CharacterClass.classes['A']
        self.use_upper=False
        # Adjust out "first" character class if it was upper-case.
        debug("RandomString.CharacterClass.first.getTag=%r"%(RandomString.CharacterClass.first.getTag(),))
        if RandomString.CharacterClass.first.getTag()=='A':
          RandomString.CharacterClass.first=RandomString.CharacterClass.classes['a']
        debug("RandomString.CharacterClass.first=%r"%(RandomString.CharacterClass.first,))

    # Give min_length a workable value if not supplied by the caller.
    l=sum([cl.min_count for cl in RandomString.CharacterClass.classes.values()])
    if min_length==None or min_length<l:
      min_length=l
    self.min_length=min_length

    # Give max_length a workable value if not supplied by the caller.
    l=sum([cl.max_count for cl in RandomString.CharacterClass.classes.values()])
    if max_length==None:
      max_length=l
    if max_length<min_length:
      max_length=min_length
    self.max_length=max_length

  def pronounceable(self):
    """Return a random string of appropriate length that is pronounceable
    to a speaker of english."""

    # Compose random, pronounceable words until one of them meets our requirements.
    outer_patience=20
    while outer_patience>0:
      debug('outer_patience=%r'%(outer_patience))
      pw=''
      # Choose a random target password length.
      plen=random.randrange(self.min_length,max(self.min_length+1,self.max_length-4))
      debug('plen=%r'%(plen))
      inner_patience=5
      while not self.isValid(pw) and inner_patience>0:
        debug('  inner_patience=%r'%(inner_patience))
        # Put together some syllables.
        while len(pw)<plen:
          pw+=random.choice(consonents)+random.choice(vowels)
          debug('    pw=%r (len=%r)'%(pw,len(pw)))
        e=random.choice(endings)
        debug('    e=%r'%(e))
        if len(pw)+len(e)<=self.max_length:
          pw+=e
        debug('    pw=%r (len=%r)'%(pw,len(pw)))
          
        # Add other character classes as needed.
        if len(pw)<=self.max_length:
          for cc in RandomString.CharacterClass.classes:
            if any([ch in pw for ch in cc.members]):
              continue
            if 'a' in cc.members:
              # We need to start over on this password.
              debug('    Starting over. No characters of class %r'%(cc.getName()))
              break
            if 'A' in cc.members:
              # Choose a random character and capitalize it.
              i=random.randrange(len(pw))
              pw=pw[:i]+pw[i].upper()+pw[i+1:]
              debug('    After capitalizing character %d: %r'%(i,pw))
            lpw=pw.lower()
            if '1' in cc.members:
              # Replace a random letter with a number.
              pw=random_ireplacer(pw,digit_mapper)
              debug('    After adding a digit: %r'%(pw))
            if '@' in cc.members:
              # Replace a random letter with a punctuation character.
              pw=random_ireplacer(pw,punct_mapper)
              debug('After adding a punctuation: %r'%(pw))
        inner_patience-=1
      if self.isValid(pw):
        break
      outer_patience-=1
    return pw

  def isValid(self,candidate):
    """Return True iff the given string matches what we've been told to
    generate."""

    # Validate overall string length.
    debug('RandomString.isValid(%r) ...'%(candidate,))
    if len(candidate)<self.min_length or len(candidate)>self.max_length:
      debug('RandomString.isValid(%r) returns False (bad length: %d)'%(candidate,len(candidate)))
      return False

    # Validate number of instances of each character class.
    debug('Checking character classes ...',indent=1)
    for cl in RandomString.CharacterClass.classes.values():
      l=len(filter(lambda ch:ch in cl.members,candidate))
      if l<cl.min_count or l>cl.max_count:
        debug("Not valid (%r). Has %d of class %r. Range is [%d,%d]."%(candidate,l,cl.getName(),cl.min_count,cl.max_count))
        debug(None,indent=-1)
        return False
    else:
      debug(None,indent=-1)

    return True

  def __call__(self,mode='random'):
    if mode=='random':
      pw=str(self)
    else:
      pw=''
      if mode.startswith('binary'):
        # Generate an 8- or 16-bit binary password.
        if mode=='binary16':
          pw=u''.join([
            unichr(random.randint(0,65535))
              for x in range(random.randint(opt.min_length,opt.max_length))
          ])
        else:
          pw=''.join([
            chr(random.randint(0,255))
              for x in range(random.randint(opt.min_length,opt.max_length))
          ])
      elif mode=='dictionary':
        non_alpha_classes=[
          RandomString.CharacterClass.classes[k]
            for k in RandomString.CharacterClass.classes
              if k.lower()!='a'
        ]
        nac=0 # Used as an index to non_alpha_classes.
        while True:
          # Choose a random word from the dictionary.
          w=random.choice(words)
          # If we're using capital letters, capitalize each word.
          if 'A' in RandomString.CharacterClass.classes:
            w=w.capitalize()
          # If we're going to need another word, and if we're using non-
          # alpha character classes, use characters from those classes
          # to separate words.
          pw+=w
          l=len(pw)
          if l<opt.min_length:
            if len(non_alpha_classes):
              pw+=random.choice(non_alpha_classes[nac].members)
              nac=(nac+1)%len(non_alpha_classes)
          else:
            # Validate length and character classe compliance.
            if self.isValid(pw):
              break # pw holds a valid password.
            # Otherwise, start over.
            pw=''
            nac=0
          #print 'w=%r pw=%r'%(w,pw)
        if opt.capitalize:
          pw=pw.capitalize()
      elif mode=='pronounceable':
        pw=self.pronounceable()
      else:
        raise RandomString.Error('Bad mode: %r'%(mode,))
    if opt.capitalize:
      pw=pw.capitalize()
    return pw

  def __str__(self):
    "Return a random string."

    debug('RandomString.__str__() ...')
    debug(None,indent=1)
    #debug('RandomString.CharacterClass.classes=%r'%(RandomString.CharacterClass.classes,))
    dump_character_classes()
    while True:
      # Reset our character class counts.
      RandomString.CharacterClass.resetAll()
      # Choose a random string length within our range.
      l=random.randint(self.min_length,self.max_length)
      # Always begin with a caracter from the first character class.
      rs=RandomString.CharacterClass.first.getCharacter()
      if rs==None:
        raise RandomString.Error('"First" character class (%r) failed to return a random character.'%(RandomString.CharacterClass.first,))
      while len(rs)<l:
        ch=RandomString.CharacterClass.choice().getCharacter()
        if ch!=None:
          rs+=ch
      if self.isValid(rs):
        break
      debug('Rejecting %r'%(rs,))
    debug(None,indent=-1)
    debug('RandomString.__str__() returns %r'%(rs,))
    return rs
    

#class_n='0123456789'
#class_l='abcdefghijklmnopqrstuvwxyz'
#class_u='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
#class_p='!@#$%^&*()-=_+~[]{}|;:,./<>?' # I've left out backslash and all quotes.
#class_s=' '
#classes=[class_n,class_l,class_u,class_p,class_s]
## Remove any unneeded character classes.
## FIXME: The "ch in opt.classes" condition needs to be rewritten to consider
##        new, more sophisticated syntax of the --classes option's value.
#for i in range(len(classes)-1,-1,-1):
#  if not any([ch in classes[i] for ch in opt.classes]):
#    del classes[i]
## Make sure we can hold all our character classes in a password.
#if opt.max_length<len(classes):
#  print >>sys.stderr,'For %d character classes, a maximum length of %d is too short!'%(len(classes),opt.max_length)
#  sys.exit(1)
#chars=''.join(classes)
#non_alpha_classes=[
#  s for s in (class_n,class_p,class_s)
#    if any([ch in s for ch in opt.classes])
#]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

if len(args)>0:
  try:
    N=int(args[0])
  except:
    print >>sys.stderr,"The N argument must be an integer value."
    sys.exit(1)
else:
  N=1

debug('Setting mode ...')
if opt.binary==16:
  mode='binary16'
elif opt.binary==8:
  mode='binary'
elif opt.dictionary:
  mode='dictionary'
elif opt.pronounceable:
  mode='pronounceable'
else:
  mode='random'
debug('    mode=%r'%(mode))
#def __init__(self,character_classes='A{1}a{10}9',min_length=None,max_length=None):
randstr=RandomString(opt.classes,opt.min_length,opt.max_length)

i=0
random.seed()
while i<N:
  s=randstr(mode)
  # The string in s must be valid to get to this point, so print it.
  if opt.format=='base64':
    print base64.b64encode(s)
  elif opt.format=='hex':
    print ''.join(['%02x'%ord(ch) for ch in s])
  elif opt.binary:
    sys.stdout.write(s)
    if N>1:
      # Terminate binary passwords with nulls only if more than one password
      # was requested.
      if opt.binary==8:
        sys.stdout.write('\x00')
      else:
        sys.stdout.write('\x00\x00')
  else:
    print s
  i+=1
