#!/usr/bin/env python3
import argparse,os,stat,traceback,sys
import RE as re # Use our user-extensible expansion of Python's re module.
from glob import glob
from debug import DebugChannel

ap=argparse.ArgumentParser(
  add_help=False,
  usage="""%(prog)s FILE_SPEC[:[START_LINE][:[END_LINE]]]

    LINE_NUMBER ::= INTEGER
    REGEX       ::= a Python regular expression
    LINE_SPEC   ::= LINE_NUMBER | REGEX
    START_LINE  ::= LINE_SPEC
    END_LINE    ::= [ "+" ] LINE_SPEC""",
  description="""Description:
"%(prog)s" is a little like if grep, head, and tail had a baby. It's purpose is to write to standard output a portion of what it reads from its input file. It looks for START_LINE in the input and begins writing to standard output from that point forward until it finds END_LINE, which it writes out and then ignores the remainder of the input. So it outputs a "slice" of the input file.

FILE_SPEC may be any file specification, optionally including "~" to indicate the user's home directory, "$VAR" or "${VAR}" to use an environment variable, or wildcard chracters to match more than one file. A filename of "-" may be given if standard input is to be read. (APPOLOGY: I haven't implemented wildcard matching yet.)

START_LINE and END_LINE can each be an integer value (interpreted as a line number) or a regular expression (which supports Python's RE syntax). If LAST_LINE gives a line number beginning with a plus (+) sign, it is taken to mean the number of lines to be output beginning with whatever line START_LINE indicates."""
)
ap.add_argument('-d',dest='delimeter',metavar='CHAR',action='store',default=':',help="Set the delimiter that separates the components of each command line argument. (default: colon (:))")
#TODO: Implement the -f option.
ap.add_argument('--follow','-f',action='store_true',default=False,help="Monitor the input file for further content if the LASTLINE or ENDPAT is not found. This is similar to the -f option of tail. (NOT YET IMPLEMENTED!)")
ap.add_argument('-i',dest='case',action='store_false',default=True,help="Ignore case when scanning for regular expressions.")
ap.add_argument('-l',dest='filenames',action='store_false',default=True,help="Suppress normal output of filename before slices of that file when more than one file is given.")
# TODO: Implement the --last option.
ap.add_argument('--last',dest='last',action='store_true',default=False,help="Output only the last matching slice in each file. (NOT YET IMPLEMENTED!)")
ap.add_argument('--next','-n',action='store_true',default=False,help="Keeps ENDPAT from matching the same line STARTPAT matched. This also requires that the line matching ENDPAT not be output and remain available to be matched by STARTPAT. (This option has no effect if LASTLINE is use rather than ENDPAT, and it makes no sense if FIRSTLINE is used rather than STARTPAT.)")
ap.add_argument('--multi','-m',action='store_true',default=False,help="Output more than one slice per file. Only the first slice is output by default. (This only makes sense if STARTPAT is used.")
ap.add_argument('--divider',metavar='D',action='store',help="Print string value D between slices if --multi was used.")
ap.add_argument('--quiet','-q',action='store_true',help="Warnings, errors, and debug output are normally written to standard error. This turns all that off.")
ap.add_argument('--debug',action='store_true',help="Turn on debugging output for trouble-shooting purposes.")
ap.add_argument('--test',action='store_true',help="This runs a self-test and is intended for debugging this program. (No output means everything worked correctly.)")
ap.add_argument('--help','-h',action='help',help="Show this help message and exit.")
ap.add_argument('args',nargs='*',help="See forms 1 and 2 above under usage.")
opt=ap.parse_args()

dc=DebugChannel(opt.debug and not opt.quiet,label='D',fmt='{label}: {basename}({function},{line}): {indent}{message}\n')

EXIT_SUCCESS=0
EXIT_WARNING=1
EXIT_ERROR=2

def warning(msg,rc=EXIT_WARNING):
  if not opt.quiet:
    print(f"{ap.prog}: Warning: {msg}",file=sys.stderr)
  if rc is not None:
    sys.exit(rc)

def die(msg,rc=EXIT_ERROR):
  if not opt.quiet:
    
    print(f"{ap.prog}: Error {msg}",file=sys.stderr)
  sys.exit(rc)

opt.re_flags=0
if not opt.case:
  opt.re_flags|=re.IGNORECASE
re_arg=re.compile(r'(?P<fs>[^%(delimeter)s]+)(%(delimeter)s(?P<first>[^%(delimeter)s]+)?(%(delimeter)s(?P<last>[^%(delimeter)s]+)?)?)?'%opt.__dict__)

def parse_arg(arg):
  """Return a (filespec,start,end,relative) tuple from the given command line
  argument. The filespec may contain wildcards, and start and end may be
  integers, regular expressions, or None. If end was missing, a value of 0 will
  be returned for it. If end is an integer that was preceded by a plus sign in
  the argument, the last element of the tuple will be True.

  >>> m=re_arg.match('testing')
  >>> m==None
  False
  >>> m.group('fs','first','last')
  ('testing', None, None)
  >>> m=re_arg.match('testing:')
  >>> m.group('fs','first','last')
  ('testing', None, None)
  >>> m=re_arg.match('testing::')
  >>> m.group('fs','first','last')
  ('testing', None, None)
  >>> m=re_arg.match('testing:5')
  >>> m.group('fs','first','last')
  ('testing', '5', None)
  >>> m=re_arg.match('testing:5:')
  >>> m.group('fs','first','last')
  ('testing', '5', None)
  >>> m=re_arg.match('testing:5:10')
  >>> m.group('fs','first','last')
  ('testing', '5', '10')
  >>> m=re_arg.match('testing::10')
  >>> m==None
  False
  >>> m.group('fs','first','last')
  ('testing', None, '10')
  >>> parse_arg('testing')
  ('testing', 1, 0, False)
  >>> parse_arg('testing:')
  ('testing', 1, 0, False)
  >>> parse_arg('testing::')
  ('testing', 1, 0, False)
  >>> parse_arg('testing:5:')
  ('testing', 5, 0, False)
  >>> parse_arg('testing:5:10')
  ('testing', 5, 10, False)
  >>> parse_arg('testing::10')
  ('testing', 1, 10, False)
  >>> parse_arg('testing::+10')
  ('testing', 1, 10, True)
  >>> parse_arg('testing:alpha:+10')
  ('testing', re.compile('alpha'), 10, True)
  >>> parse_arg('testing:alpha:beta')
  ('testing', re.compile('alpha'), re.compile('beta'), False)
  >>> parse_arg('testing::beta')
  ('testing', 1, re.compile('beta'), False)
  """

  # Parse the filespec, first, and last components from this argument.
  m=re_arg.match(arg)
  if not m:
    die('Bad argument: %r'%arg)
  fs,first,last=m.group('fs','first','last')
  fs=os.path.expanduser(os.path.expandvars(fs))
  if not first: first=None
  if not last: last=None
  relative=False
  dc(f"fs={fs!r}, first={first!r}, last={last!r}")
  if first==None:
    first=1
  elif first.isdigit():
    first=int(first)
  else:
    try:
      first=re.compile(first,opt.re_flags)
    except:
      die('Bad regular expression: %s'%first)
  if last==None:
    last=0
  elif last.startswith('+') or last.isdigit():
    if last[0]=='+':
      relative=True
      last=last[1:]
    if not last.isdigit():
      die('Bad numeric value: %s%s'%(('','+')[relative],last))
    last=int(last)
  else:
    try:
      last=re.compile(last,opt.re_flags)
    except:
      die('Bad regular expression: %r'%last)
  return fs,first,last,relative

class FileReader(object):
  """Use this file-like class for reading lines from files while keeping
  track of the current line number and the position from which the
  most recent line was read."""

  def __init__(self,filename):
    """Given the name of the file to read from, initialize this
    FileReader instance."""

    self.file=open(filename)
    self.line_number=0
    self.position=0
    self.eof=False

  def __enter__(self):
    dc(self.file.name)
    return self

  def __exit__(self,exc_type,exc_value,exc_traceback):
    dc(self.file.name)
    if exc_value!=None:
      traceback.print_exception(exc_type,exc_value,exc_traceback)
    return True

  def __iter__(self):
    """When used as an iterator, iterate line by line."""

    while True:
      line=self.readline()
      if not line:
        break
      yield line

  @property
  def seekable(self):
    """Return the "seekable" state of the unlying file object."""

    return self.file.seekable

  def readline(self):
    """Read and return the next line from our file. Also remember the
    file location of the returned line and manage this object's
    line_number value and its eof state."""

    if self.eof:
      return ''
    # Remember this new line's position in our file.
    self.pos=self.file.tell()
    # Attempt to read the next line. line=='' indicates EOF.
    line=self.file.readline()
    if line:
      self.line_number+=1
    else:
      self.eof=True
    dc(f"self.eof={self.eof}, line={line}")
    return line

  def rewindOneLine(self):
    """Reposition this file to the beginning of the line most recently
    read from it. Return this FileReader instance."""

    self.file.seek(self.pos)
    self.line_number-=1
    return self

def slice(filename,first,last,relative=False):
  """Read the given file, and output the section from first to last.
  The relative argument is true if last is numeric and expresses
  the number of lines to be returned rather than the ending line number.

  TODO: In order to doctest slice(), we need its stdout. Figure that out.

  #>>> repr(slice(sys.argv[0],1,1))
  #'#!/usr/bin/env python'
  """

  # Initialization and reality checking.
  found_start=found_end=False
  with FileReader(filename) as f:
    if opt.next and not f.seekable:
      die("Cannot use -n (--next) option with %s because it can't be rewound."%(filename,))

    while True: # In case opt.multi is True.
      # Find the first line of our slice.
      if isinstance(first,int):
        for line in f:
          if f.line_number>=first:
            found_start=True
            break
      else:
        for line in f:
          if first.search(line):
            found_start=True
            break

      # If we're at EOF, there's no need to continue.
      if f.eof:
        break

      # Output lines until the end of the slice (or EOF).
      sys.stdout.write(line)
      if isinstance(last,int):
        stop=last
        if relative:
          stop+=f.line_number-1
        for line in f:
          if last!=0 and f.line_number>stop:
            found_end=True
            break
          sys.stdout.write(line)
      else:
        found=last.search(line)
        if not found:
          for line in f:
            found=last.search(line)
            sys.stdout.write(line)
            if found:
              if opt.next:
                f.rewindOneLine() # Set up to re-read this line.
              found_end=True
              break

      # Break out of this loop unless we're looking for multiple slices.
      if not opt.multi:
        break
      if opt.divider is not None:
        print(opt.divider)

  return found_start,found_end


# If the --test option was given, run our internal tests and quit.
if opt.test:
  import doctest,subprocess

  failed,tested=doctest.testmod(
    optionflags=doctest.ELLIPSIS # Ellipsis matches substrings.
  )
  if failed:
    sys.exit(EXIT_ERROR)

  def run(*args):
    "Return (stdout,stderr) from running the given command."

    proc=subprocess.Popen(args,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    stdout,stderr=proc.communicate()
    return (proc.returncode,stdout,stderr)

  prog=sys.argv[0]
  error,stdout,stderr=run(prog,"%s:^aaa:^$")
  

  sys.exit(EXIT_SUCCESS)

# Step through our command line arguments:
for arg in opt.args:
  fs,first,last,relative=parse_arg(arg)
  if fs=='-':
    flist=['/dev/stdin']
  else:
    flist=glob(fs)
  for fn in flist:
    if opt.filenames and (len(opt.args)>1 or len(flist)>1):
      print('\n%s:'%fn)
    found_start,found_end=slice(fn,first,last,relative)
    if not found_start:
      if isinstance(first,int):
        warning(f"Starting line number {first} not found.")
      else:
        warning(f"Starting pattern {first.pattern} not found.")
    if not found_end:
      if isinstance(last,int):
        if relative:
          warning(f"Relative ending line number +{last} not found.")
        else:
          warning(f"Ending line number {last} not found.")
      else:
        warning(f"Ending pattern {last.pattern} not found.")

sys.exit(EXIT_SUCCESS)

"""
THIS IS TEST DATA, USED BY THE THIS FUNCTION'S DOCTESTS.

aaa 1
bbb 1
ccc 1
ddd 1

aaa 2
bbb 2
ccc 2
ddd 2

aaa 3
bbb 3
ccc 3
ddd 3
"""
