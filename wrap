#!/usr/bin/env python3

import argparse,os,re,sys
from textwrap import wrap

ap=argparse.ArgumentParser(
  add_help=False,
  description="Read text from standard input (one line at a time), wrap it, and write it to standard output. Indenture is preserved, so strip leading whitespace before wrapping if that's what you want. There's also some very minimal support for markdown. Unordered lists are indented and wrapped correctly."
)
ap.add_argument('--markdown','-m',action='store_true',help="Enable our very minimal markdown support.")
ap.add_argument('--help','-h',action='help',help="Show this help message and exit.")
ap.add_argument('width',metavar='WIDTH',nargs='?',default=int(os.environ.get('COLUMNS','80')),type=int,help="Number of characters to allow on each line of output.")
opt=ap.parse_args()

nws=re.compile('\S') # Non-whitespace character.
uli=re.compile('[-+*] ') # Unordered list item.

# TODO: When in markdown mode, wrap contiguous non-blank lines together so that
#       blank lines create paragraph breaks.

if sys.stdin.isatty():
  ap.print_help()
  print("\nHint: Try piping or redirecting text to this command.\n")
  sys.exit(1)

for line in sys.stdin:
  # Assume no prefix (generally for markdown support).
  prefix=''
  prefix_len=0
  # Measure the leading whitespce in this line.
  m=nws.search(line)
  lead_len=m.start() if m else 0
  # Remove all leading and trailing whitespace.
  line=line.strip()
  # Is this a unordered list entry?
  if opt.markdown:
    m=uli.match(line)
    if m:
      prefix=m.group()
      prefix_len=len(prefix)
      line=line[prefix_len:].lstrip()
  # Wrap this line to standard output.
  print('\n'.join(wrap(
    line,
    width=opt.width,
    initial_indent=' '*lead_len+prefix,
    subsequent_indent=' '*(lead_len+prefix_len),
    break_long_words=False,
    break_on_hyphens=False
  )))
