#!/usr/bin/env python3

"""
This is the unittest script for CSV.py.
"""

import CSV as csv
import io,unittest

class TestDialects(unittest.TestCase):

  def testListDialects(self):
    dlist=csv.list_dialects()
    self.assertTrue('excel' in dlist)
    self.assertTrue('excel-tab' in dlist)
    self.assertTrue('unix' in dlist)

  def testGetDialect(self):
    d=csv.get_dialect('excel')
    with self.assertRaises(csv.Error,msg="unknown dialect: 'x'"):
      csv.get_dialect('x')

  def testExcel(self):
    d=csv.get_dialect('excel')
    self.assertEqual(d.delimiter,',')
    self.assertEqual(d.quotechar,'"')
    self.assertEqual(d.lineterminator,'\r\n')
    self.assertEqual(d.quoting,csv.QUOTE_MINIMAL)
    self.assertEqual(d.doublequote,True)
    self.assertEqual(d.escapechar,None)
    self.assertEqual(d.skipinitialspace,False)
    self.assertEqual(d.strict,False)

  def testRegisterDialect(self):
    # SEP[Q[END[QSTYLE[DQUOTE[ESC[SKIPWS[STRICT]]]]]]]
    csv.register_dialect('escapable',escapechar='\\')
    d=csv.get_dialect('escapable')
    self.assertEqual(d.delimiter,',')
    self.assertEqual(d.quotechar,'"')
    self.assertEqual(d.quoting,csv.QUOTE_MINIMAL)
    self.assertEqual(d.lineterminator,'\r\n')
    self.assertEqual(d.doublequote,True)
    self.assertEqual(d.escapechar,'\\')
    self.assertEqual(d.skipinitialspace,False)
    self.assertEqual(d.strict,False)

  def testGTED(self):
    # SEP[Q[END[QSTYLE[DQUOTE[ESC[SKIPWS[STRICT]]]]]]]
    d=csv.parse_dialect('gted','|"LnfNff')
    self.assertEqual(d.delimiter,'|')
    self.assertEqual(d.quotechar,'"')
    self.assertEqual(d.quoting,csv.QUOTE_NONE)
    self.assertEqual(d.lineterminator,'\n')
    self.assertEqual(d.doublequote,False)
    self.assertEqual(d.escapechar,None)
    self.assertEqual(d.skipinitialspace,False)
    self.assertEqual(d.strict,False)

class Test1(unittest.TestCase):

  # Some simple CSV data in the "excel" dialect.
  excel_input="""\
  h1,h2,h3,h4,h5\r
  a,b,c,d,e\r
  f,g,h,i,j\r
  k,l,m,n,o\r
  p,q,r,w,t\r
  u,v,w,x,y\r\n"""

  def testReader1(self):
    # Read out data into an list of rows.
    input=io.StringIO(self.__class__.excel_input)
    reader=csv.reader(input,'excel')
    data=[row for row in reader]
    # Write these rows to a string.
    output=io.StringIO()
    writer=csv.writer(output,'excel')
    writer.writerows(data)
    # Compare the input data to the output string.
    self.assertEqual(input.getvalue(),output.getvalue())

if __name__=='__main__':
  unittest.main()
