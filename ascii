#!/usr/bin/env python
import optparse,os,sys
from OptionParserFormatters import IndentedHelpFormatterWithNL

# Handle command line options.
op=optparse.OptionParser(
  add_help_option=False,
  formatter=IndentedHelpFormatterWithNL(2,8),
  usage="%prog [OPTIONS] [string]",
  description="Description: Read text from standard input and/or the command line argument(s), and output the ASCII value of each character in the given or default radix."
)
op.add_option('--radix','-r',dest='radix',action='store',type='int',default=16,help="Set the base to use when giving ASCII values for characters. The valid range is from 2 to 36. (default: %default)")
op.add_option('-b',dest='radix',action='store_const',const=2,help="Binary (--radix 2)")
op.add_option('-d',dest='radix',action='store_const',const=10,help="Decimal (--radix 10)")
op.add_option('-h',dest='radix',action='store_const',const=16,help="Hexadecimal (--radix 16)")
op.add_option('-o',dest='radix',action='store_const',const=8,help="Octal (--radix 8)")
op.add_option('--pad',dest='pad',action='store',type='int',default=0,help="Pad with leading zeros to make occupy this many characters (not counting any prefix). (default: %default)")
op.add_option('--prefix','-p',action='store_true',default=False,help="Prefix each numeric character value with notation indicating the base being used.")
op.add_option('-v',dest='value_only',action='count',default=0,help="Output only numeric values of the input. Do not output each corresponding character. -v gives one value per line. -vv gives one line with values separated by spaces. -vvv outputs all values on one line with nothing between them.")
op.add_option('--help',dest='help',action='store_true',default=False,help="Show this usage message.")
try:
  opt,args=op.parse_args()
except Exception,e:
  print >>sys.stderr,str(e)
  sys.exit(2)
if opt.help:
  op.print_help()
  sys.exit(0)
if opt.radix<2 or opt.radix>36:
  op.print_help()
  sys.exit(2)
if opt.prefix:
  if opt.radix==2: opt.prefix='0b'
  elif opt.radix==8: opt.prefix='0'
  elif opt.radix==10: opt.prefix=''
  elif opt.radix==16: opt.prefix='0x'
  else: opt.prefix='%db'%opt.radix
else:
  opt.prefix=''
if opt.value_only:
  if opt.value_only==1: opt.delimiter='\n'
  elif opt.value_only==2: opt.delimiter=' '
  else: opt.delimiter=''

# Get the input from stdin and/or command line.
instr=''
if not sys.stdin.isatty():
  instr+=os.fdopen(sys.stdin.fileno(),'rb').read()
if args:
  instr+=' '.join(args)

digits='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
def based_integer(n,b,prefix='',pad=0):
  """Return a string expressing the integer n in base b, optionally
  following the given prefix string."""

  chars=[]
  if n<0:
    sign=-1
  elif n==0:
    chars=digits[:1]
  else:
    sign=1
  n*=sign
  while n>0:
    chars.insert(0,digits[n%b])
    n/=b
  if sign==-1:
    chars.insert('-')
  if len(chars)<pad:
    prefix+=digits[0]*(pad-len(chars))
  return prefix+''.join(chars)

if opt.value_only:
  print opt.delimiter.join([
    based_integer(ord(ch),opt.radix,opt.prefix,opt.pad) for ch in instr
  ])
else:
  for ch in instr:
    n=based_integer(ord(ch),opt.radix,opt.prefix,opt.pad)
    print '%r: %s'%(ch,n)
