#!/usr/bin/env python3

try:
  import argparse
except:
  import argparse27 as argparse
import csv,os,shlex,string,sys
import RE as re
import ansi

from debug import DebugChannel
dc=DebugChannel(label='D')

progname=os.path.basename(sys.argv[0])
def die(msg='',rc=1):
  'Print the message and terminate this process with the given return code.'

  if msg:
    print(progname+': '+msg, file=sys.stderr)
  sys.exit(rc)

def re_help():
  'Send an excerpt of re.__doc__ to standard output.'

  started=False
  for line in re.__doc__.split('\n'):
    if started:
      if 'This module exports' in line:
        break
      print(line)
    else:
      if 'Regular expressions can contain both' in line:
        print(line)
        started=True
  print('''
You can read an expanded treatment of Python's RE syntax at the
following URL:
    http://docs.python.org/library/re.html#regular-expression-syntax
''')

import textwrap
class FittedHelpFormatter(argparse.HelpFormatter):
  """Formatter for generating usage messages and argument help settings.

  This formatter class extends argparse.HelpFormatter so that it wraps
  text to the actual terminal width rather than assuming 80 columns. It
  also does not remove newlines. :-)"""

  def __init__(self,
               prog,
               indent_increment=2,
               max_help_position=None,
               width=None):
    if width==None:
      width=self.getTerminalSize()[0]
    if max_help_position==None:
      max_help_position=int(width/3.33333333)
    super(FittedHelpFormatter,self).__init__(
      prog,indent_increment,max_help_position,width
    )
  
  def _fill_text(self, text, width, indent):
      #text = self._whitespace_matcher.sub(' ', text).strip()
      return textwrap.fill(
        text,width,replace_whitespace=False,
        initial_indent=indent,subsequent_indent=indent
      )

  def getTerminalSize(self):
    '''This method came from StackOverflow.com (wonderful site) in an
    answer posted by Johannes WeiB (the B is really a beta symbol). He
    didn't know the source.'''

    import os
    env = os.environ
    def ioctl_GWINSZ(fd):
      try:
        import fcntl, termios, struct, os
        cr=struct.unpack(
          'hh',
          fcntl.ioctl(fd,termios.TIOCGWINSZ,'1234')
        )
      except:
        return
      return cr
    cr=ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
      try:
        fd=os.open(os.ctermid(),os.O_RDONLY)
        cr=ioctl_GWINSZ(fd)
        os.close(fd)
      except:
        pass
    if not cr:
      cr=(env.get('LINES',25),env.get('COLUMNS',80))
    return int(cr[1]),int(cr[0])

usage=''' Form 1: %(prog)s [options] [RE ...]
  Form 2: %(prog)s [options] --columns=COLUMNS
  Form 3: %(prog)s [options] --csv
  Form 4: %(prog)s [options] --fields=FIELDS
  Form 4: %(prog)s [options] --stripe=N'''
description='''The %(prog)s command is a filter (reads from standard input and writes to standard output) that colors its output using ANSI escape sequences. Because of this, %(prog)s's output is suitable only for terminal display. Redirecting %(prog)s's output to a file or to the input of another command (except for things like the "less" command) will likely yield unwanted results.

Form 1 of %(prog)s scans each line for any REs (regular expressions) given as arguments. Any text matching the first RE is colored by the first palette entry, any text matching the second RE is colored by the second, and so on. By default, the palette entries are red, green, yellow, bold blue, magenta, and cyan, all against a black background. The --palette option can be used to change the list of colors.

By default, the number of REs used from the command line is limited to the number of entries in the palette. Exceeding this number of REs is not an error, but text matching the surplus REs will not be colored. Use the -w option to change this bahavior.

Since %(prog)s is written in Python, Python's regular expression extensions are available. Python REs are extensions of POSIX EREs, but it uses Perl-like character classes (e.g. \s and \w) rather than POSIX character classes (e.g. [:space:] and [:word:], respectively), making REs more concise. Use --re-help to get a brief lesson in Python REs.

NOTE: Because of how %(prog)s currently handles REs, using the (?...) RE forms will cause an error. This is a known bug and is on the list of things to fix.

Forms 2-4 take no RE. They use column or field position to determine the color of each part of the output, the first field according to the first palette entry, and so forth.

The MARKOPTS environment variable may be used to supply default command line options to %(prog)s. Anything found in this variable is processed before %(prog)s's command line options. The value of MARKOPTS is interpreted in a shell context, so be sure to quote or escape any white space.'''
envopts=shlex.split(os.getenv('MARKOPTS','').strip())
if envopts:
  sys.argv[1:1]=envopts

epilog='\n'
if envopts:
  epilog+='''MARKOPTS currently contains:

'''+'\n'.join(['    %s'%x for x in envopts])
else:
  epilog+='MARKOPTS is currently empty.'
epilog+='''

NOTE: The context options have not yet been implemented!
'''

p=argparse.ArgumentParser(
  formatter_class=FittedHelpFormatter,
  usage=usage,
  description=description,
  epilog=epilog
)

p.add_argument('-b','--background',dest='background',choices=list(ansi.background.keys()),default='black',
  help='''Sets the assumed background color, which defaults to %(default)s. ASNI codes to effect the background color that's aready assumed will not be output.''')
p.add_argument('-C',dest='comment_mode',action='store_true',default=False,
  help='''Turns on comment mode, which inserts the comment pattern (see --comment-format) at the start of the pattern list. This marks any line whose first non-space character is '#', which is very commonly a comment line. Use the --comment option to change the pattern used to idententify comments.''')
p.add_argument('--columns',dest='columns',action='store',default=None,
  help='''This option turns on fixed-column mode and accepts a comma-separated list of column numbers as its argument. Each given column number identifies the beginning of a column in each line of the input data. This option cannot be used with other highlighting modes. The first column is numbered 1.''')
p.add_argument('--comment-format',dest='comment_format',action='store',default='^\s*(#|;|--|//).*',
  help='''Specifies the pattern used to identify comment lines, which is '%(default)s' by default.''')
p.add_argument('--after-context',dest='after',action='store',type=int,default=None,
  help='''Print NUM lines of leading context before matching lines. Places a line containing -- between contiguous groups of matches.''')
p.add_argument('--before-context',dest='before',action='store',type=int,default=None,
  help='''Print NUM lines of trailing context before matching lines. Places a line containing -- between contiguous groups of matches.''')
p.add_argument('--context',dest='context',action='store',type=int,default=None,
  help='''Print NUM lines of leading and trailing context before matching lines. Places a line containing -- between contiguous groups of matches. The context options are only useful in combination whth the --grep option.''')
p.add_argument('--csv',dest='csv',action='store_true',default=False,
  help='''For use with -f, this option specifies that the data is in CSV format.''')
p.add_argument('-d','--delimiter',dest='delim',default=None,
  help='''For use with -f, this option specifies a regular expression that matches field delimiters. The default is '\s+', which matches one or more whitespace characters.''')
p.add_argument('-D','--diff',dest='diff',action='store_true',default=False,
  help='''Turns on diff mode, which colors lines removed differently from lines added.''')
p.add_argument('--discard',dest='discard',metavar='RE',action='store',default=None,
  help='''Discards any lines matching the given RE and keeps all others. Discarding lines of CSV data has not yet been implemented. This option is for filtering only and has no effect on colarization. (Cannot be used with --keep.)''')
p.add_argument('-f','--fields',dest='fields',action='store',default=None,
  help='''Specifies which fields are to be marked. Field ranges are separated by commas and take the form "m[-[n]]" or "[[m]-]n" where m is the first column in the range (counted from 1) and n is the last. Each field *range* gets its own color. E.g., "-f 1-3,6" says to mark fields 1-3 with the first color in the current palette and to color field 6 with the second. See --csv and -d for data parsing options.''')
p.add_argument('--file',dest='file',action='store',default=None,
  help='''Read from the given file rather than standard input.''')
p.add_argument('-g','--grep',dest='grep',action='store_true',default=False,
  help='''Output only lines that match at least one color filter.''')
p.add_argument('-i',dest='ignore_case',action='store_true',default=False,
  help='''Ignore case when matching patterns. This applies both to RE arguments to be matched and to any argument to --discard or --keep.''')
p.add_argument('-I','--input',dest='input_from',action='store',choices=('diff','du'),default=None,
  help='''Use sets of pattern known to be helpful for marking the output of certain programs. Valid values are diff and du.''')
p.add_argument('--keep',dest='keep',metavar='RE',action='store',default=None,
  help='''Keep any lines matching the given RE and discards all others. Keeping lines of CSV data has not yet been implemented. This option is for filtering only and has no effect on colarization. (Cannot be used with --discard.)''')
p.add_argument('-l',dest='whole_line',action='store_true',default=False,
  help='''The first pattern matching any portion of a line will mark the whole line as a match.''')
p.add_argument('-L',dest='log_mode',action='store_true',default=False,
  help='''Turns on log mode, which marks error, warning, info, and debug output in addition to the time, host, and process conent. Also see --log-format. NOT YET FULLY IMPLEMENTED.''')
p.add_argument('--log-format',dest='log_format',action='store',default=(
  "(?P<time>\w+\s+\d+\s\d+:\d+:\d+)"
  "\s+"
  "(?P<host>\S+)"
  "\s+"
  "(?P<proc>"
    "(?P<prog>[^[ ]+)"
    "(\[(?P<pid>\d+(?P<sub>-\d+)?)\])?"
  ")"
  "\s*"
  "(?P<level>\S+)?"
  ":\s*"
  "(?P<message>.*)"
),
  help="""Set the format to expect for log text, which is a regular expression that matches and names the various parts of each line of log data when the -L option is used. (default="%(default)s") NOT YET FULLY IMPLEMENTED.""")
p.add_argument('--palette',dest='palette',action='store',default='dark',
  help='''Comma-delimited list of color specifications to use to highlight matches for patterns. Each spec is of the form "[ATTR] FG [on BG]" where ATTR is any of bold, italics, underscore, or strikethrough, and FG and BG may be any of black, red, green, yellow, blue, magenta, cyan, or white. Two other possible values for a colorspec can be "normal" and "reverse", which don't make sence with other ATTR, FB, or BG values. You should also know that ATTR, FG, and BG values are persistent from one spec to the next, so, for example "red on black,green,yellow" specifies that matches for the first pattern should be red, second pattern are green, third are yellow, and that all have black backgrounds. Since the palette syntax tends to be verbose, you can also use --palette=dark or --palette=light to use colors generally suitable for dark or light terminal backgrounds, respectively. Since only red, blue, and magenta are used on light backgrounds, using -w is often a good idea with --palette=light. The default setting is "%(default)s".''')
p.add_argument('-r','--reverse',dest='reverse',action='store_true',default=False,
  help='''Reverse foreground and background colors of highlighted sections.''')
p.add_argument('--re-help',dest='re_help',action='store_true',default=False,
  help='''Display a brief description of Python regular expressions. Then quit.''')
p.add_argument('-s','--stanzas',dest='stanzas',action='store_true',default=False,
  help='''In "stanzas" mode, the the RE arguments are matched against input lines. Output lines are colored according to the most recent RE matched. If only one RE is given, output lines will alternate between the first two colors in thte palette every time the input line matches the RE.'''),
p.add_argument('--stripe',metavar='N',dest='stripe',type=int,default=None,
  help='''Color each group of N lines of text a different color, rotating through the default or given pallete as we go.''')
p.add_argument('--traffic',dest='traffic',action='store_true',default=False,
  help='''Mark instances of the words red, yellow, and green in their respective colors.''')
p.add_argument('-w',dest='wrap',action='store_true',default=False,
  help='''Turn on color wrapping mode. By default, for n colors in the palette, the match for any pattern beyond the nth pattern simply uses the last color in the palette. Wrapping mode changes this behavior so the first color is used for the n+1st pattern, the second for the n+2nd, and so on.''')
p.add_argument('--debug',dest='debug',action='store_true',default=False,
  help='''Turn on debug mode. Unless you're modifying the code for this command, you don't need this.''')
p.add_argument('patterns',nargs=argparse.REMAINDER)

#re_columnList=re.compile(r'(?:\s*(\d+)\s*,)*(?:\s*(\d+)\s*)')
re_number=re.compile(r'\d+')

try:
  opt=p.parse_args()
except IOError as e:
  errno,errmsg=e.args
  if errmsg=='Broken pipe':
    sys.exit(1)
  raise
dc.enable(opt.debug)
ansi.current_background=opt.background
if opt.file:
  try:
    opt.file=open(opt.file)
  except IOError as e:
    die(str(e))
else:
  opt.file=sys.stdin
if opt.re_help:
  re_help()
  sys.exit(0)
if opt.ignore_case:
  opt.re_flags=re.I
else:
  opt.re_flags=0
if opt.context!=None:
  if opt.before!=None: opt.before=opt.context
  if opt.after!=None: opt.after=opt.context
if opt.reverse:
  ansi.foreground,ansi.background=ansi.background,ansi.foreground
if opt.columns:
  opt.columns=[int(x)-1 for x in re_number.findall(opt.columns)]
  if [x for x in opt.columns if x<0]:
    die('column numbers must be positive integers: %s'%' '.join(['%s'%(x+1) for x in opt.columns]))
  cols=list(opt.columns)
  cols.sort()
  if opt.columns!=cols:
    die('column numbers must be in ascending order: %s'%' '.join(['%s'%(x+1) for x in opt.columns]))
  if opt.columns[0]!=0:
    opt.columns.insert(0,0)
  if opt.fields:
    die('-f (--fields) may not be used with --columns.')
  if opt.patterns:
    die('patterns may not be used with --columns')
  if opt.comment_mode:
    die('-C cannot be used with --columns')
  if opt.diff:
    die('-D (--diff) cannot be used with --columns')
  if opt.input_from:
    die('-I (--input) cannot be used with --columns')
  if opt.whole_line:
    die('-l cannot be used with --columns')
  if opt.stanzas:
    die('-s (--stanzas) cannot be used with --columns')
  if opt.stripe:
    die('--stripe cannot be used with --columns')
if opt.fields:
  if opt.delim and opt.csv:
    die('-d (--delimiter) cannot be used with --csv')
  if opt.comment_mode:
    die('-C cannot be used with -f (--fields)')
  if opt.diff:
    die('-D (--diff) cannot be used with -f (--fields)')
  if opt.input_from:
    die('-I (--input) cannot be used with -f (--fields)')
  if opt.stanzas:
    die('-s (--stanzas) cannot be used with --fields')
  if opt.stripe:
    die('--stripe cannot be used with --fields')
  if not opt.csv and not opt.delim:
    opt.delim=r'\s+'
if opt.comment_mode:
  if opt.diff:
    die('-D (--diff) and -C cannot be used together.')
  opt.patterns.insert(0,opt.comment_format)
elif opt.diff:
  opt.patterns.insert(0,'^==================+')
  opt.patterns.insert(0,'^[+>].*')
  opt.patterns.insert(0,'^[-<].*')
elif opt.input_from=='diff':
  opt.patterns.insert(0,'^==================+')
  opt.patterns.insert(0,'^[+>].*')
  opt.patterns.insert(0,'^[-!<].*')
elif opt.input_from=='du':
  opt.patterns.insert(0,'^\s*[0-9.]+K') # Blue
  opt.patterns.insert(0,'^\s*[0-9.]+G') # Yellow
  opt.patterns.insert(0,'^\s*[0-9.]+M') # Green
  opt.patterns.insert(0,'^\s*[0-9.]+T') # Red
if opt.discard and opt.keep:
  die('--discard and --keep cannot be used together.')
if opt.discard:
  opt.discard=re.compile(opt.discard,opt.re_flags)
if opt.keep:
  opt.keep=re.compile(opt.keep,opt.re_flags)
if opt.stripe!=None and opt.stripe<1:
  die('--stripe requires an integer greater than 0.')
if opt.traffic:
  opt.patterns.insert(0,r'\b[Yy][Ee][Ll]{2}[Oo][Ww]\b')
  opt.patterns.insert(0,r'\b[Gg][Rr][Ee]{2}[Nn]\b')
  opt.patterns.insert(0,r'\b[Rr][Ee][Dd]\b')
if opt.log_mode:
  opt.patterns=[opt.log_format]
if opt.whole_line:
  opt.patterns=['.*%s.*'%p for p in opt.patterns]

if dc:
  dc("Options:").indent()
  dc('opt.after=%r'%(opt.after,))
  dc('opt.background=%r'%(opt.background,))
  dc('opt.before=%r'%(opt.before,))
  dc('opt.columns=%r'%(opt.columns,))
  dc('opt.comment_format=%r'%(opt.comment_format,))
  dc('opt.comment_mode=%r'%(opt.comment_mode,))
  dc('opt.context=%r'%(opt.context,))
  dc('opt.csv=%r'%(opt.csv,))
  dc('opt.delim=%r'%(opt.delim,))
  dc('opt.diff=%r'%(opt.diff,))
  dc('opt.discard=%r'%(opt.discard,))
  dc('opt.fields=%r'%(opt.fields,))
  dc('opt.file=%r'%(opt.file,))
  dc('opt.grep=%r'%(opt.grep,))
  dc('opt.ignore_case=%r'%(opt.ignore_case,))
  dc('opt.input_from=%r'%(opt.input_from,))
  dc('opt.keep=%r'%(opt.keep,))
  dc('opt.log_format=%r'%(opt.log_format,))
  dc('opt.log_mode=%r'%(opt.log_mode,))
  dc('opt.palette=%r'%(opt.palette,))
  dc('opt.re_help=%r'%(opt.re_help,))
  dc('opt.reverse=%r'%(opt.reverse,))
  dc('opt.stanzas=%r'%(opt.stanzas,))
  dc('opt.traffic=%r'%(opt.traffic,))
  dc('opt.whole_line=%r'%(opt.whole_line,))
  dc('opt.wrap=%r'%(opt.wrap,))
  dc('opt.patterns=[%s\n]'%(''.join(["\n  '%s',"%(p,) for p in opt.patterns]),))
  dc.undent()

if opt.patterns:
  for p in opt.patterns:
    try:
      x=re.compile(p)
    except re.error as e:
      die('RE error (%s): %r'%(' '.join(e.args),p))
elif not (opt.columns or opt.fields or opt.stripe or opt.log_mode):
  die('No RE arguments given. Nothing to do.')

def parseRangeList(s):
  '''Convert string list of ranges into a list of (n,m) range tuples.'''

  ranges=[x.strip() for x in s.split(',')]
  f=[]
  for r in ranges:
    r=r.split('-')
    if len(r)==1:
      m=int(r[0])
      n=m-1
    else:
      n,m=r
      if n=='':
        n=0
      else:
        n=int(n)-1
      if m=='':
        m=None
      else:
        m=int(m)
    f.append((n,m))
  return f

class DelimitedDataReader(object):
  'Parses fields based on a delimiting regular expression.'

  def __init__(self,stream=sys.stdin,delimiter=r'\s+'):
    'Set our input stream and delimiting regular expression.'

    self.stream=stream
    self.delim=re.compile(delimiter)

  def __iter__(self):
    return self

  def __next__(self):
    '''Return a list of (field,deliter) pairs for each field and
    terminating delimiter in the next line of input.'''

    s=self.stream.readline()
    if not s:
      raise StopIteration
    if s[-1]=='\n':
      s=s[:-1]
    flist=[]
    m=self.delim.search(s)
    i=0
    while m:
      flist.append([s[i:m.start()],m.group()])
      i=m.end()
      m=self.delim.search(s,i)
    flist.append([s[i:],''])
    return flist

def get_input_lines(f=sys.stdin):
  '''This generator function lets read stdin with a for loop while
  keeping the ability to call sys.stdin.readline(), which is important
  for buffer control reasons. This is also a sensible place to
  implement our --discard and --keep functionality.'''

  try:
    s=f.readline()
    while s:
      if opt.discard and opt.discard.search(s):
        s=f.readline()
        continue
      if not opt.keep or opt.keep.search(s):
        yield s
      s=f.readline()
  except KeyboardInterrupt:
    sys.exit(0)

# Convert opt.palette into a list of ansi.Color objects.
opt.palette=ansi.Palette(opt.palette)

if opt.fields:
  if opt.delim:
    opt.delim=re.compile(opt.delim)

def colorOf(index):
  return str(opt.palette(index))

if opt.columns:
  # Color each field of our fixed field width data.
  r=range(len(opt.columns))
  opt.columns.append(None)
  for s in get_input_lines(opt.file):
    try:
      s=(''.join([colorOf(i)+s[opt.columns[i]:opt.columns[i+1]] for i in r])).replace('\n',str(ansi.norm))
      print(s)
      sys.stdout.flush()
    except:
      print('l=%r'%l)
      print('opt.columns=%r'%opt.columns)
      print('s=%r'%s)
      print('i=%r'%i)
      raise
elif opt.stanzas:
  # Compile our regular expressions.
  patcount=len(opt.patterns)
  if opt.patterns: # Combine and compile our patterns into a single regular expression.
    opt.patterns=re.compile('|'.join(['(%s)'%x.replace('(','(?:') for x in opt.patterns]),opt.re_flags)
  if patcount>1:
    # Assign color based on which RE most recently matched.
    for s in get_input_lines(opt.file):
      m=opt.patterns.search(s)
      if m!=None:
        g=m.groups()
        if g:
          for i in range(len(g)):
            if g[i]!=None:
              break
          sys.stdout.write(colorOf(i))
      sys.stdout.write(s)
      sys.stdout.flush()
    sys.stdout.write(str(ansi.norm))
    sys.stdout.flush()
  else:
    # Alternate between first two palette entries every time RE is matched.
    i=1
    for s in get_input_lines(opt.file):
      m=opt.patterns.search(s)
      if m!=None:
        i=1-i
        sys.stdout.write(colorOf(i))
      sys.stdout.write(s)
      sys.stdout.flush()
    sys.stdout.write(str(ansi.norm))
    sys.stdout.flush()
elif opt.stripe:
  # Color each group of opt.stripe lines a new color from our palette.
  color=n=0
  for s in get_input_lines(opt.file):
    print(colorOf(color)+s.rstrip()+str(ansi.norm))
    n+=1
    if n%opt.stripe==0:
      color+=1
  #sys.stdout.write(str(ansi.norm))
elif opt.fields:
  # Highlight fields based on position.
  opt.fields=parseRangeList(opt.fields)
  frange=range(len(opt.fields))
  if opt.delim:
    # Handle space- or custom-delimited data.
    reader=DelimitedDataReader(sys.stdin,opt.delim)
    for flist in reader:
      for i in frange:
        j,k=opt.fields[i]
        for f in range(j,[k,len(flist)][k==None]):
          if f<len(flist):
            flist[f][0]=colorOf(i)+flist[f][0]+str(ansi.norm)
      print(''.join([f+d for f,d in flist]))
      sys.stdout.flush()
  else:
    # Handle CSV data.
    reader=csv.reader(sys.stdin)
    writer=csv.writer(sys.stdout)
    for flist in reader:
      for i in frange:
        j,k=opt.fields[i]
        for f in range(j,[k,len(flist)][k==None]):
          if f<len(flist):
            flist[f]=colorOf(i)+flist[f]+str(ansi.norm)
      writer.writerow(flist)
      sys.stdout.flush()
elif opt.log_mode:
  fields=('time','host','proc','level','message')
  opt.patterns=re.compile(opt.log_format)
  output_format=string.Template('$time $host $proc$level: $message')
  for s in get_input_lines(opt.file):
    m=opt.patterns.search(s)
    if m!=None and not opt.grep:
      d=m.groupdict('')
      for i in range(len(fields)):
        d[fields[i]]=opt.palette[i](d[fields[i]])
      print(output_format.safe_substitute(d))
else:
  # Highlight based on RE matching.
  if opt.patterns: # Combine and compile our patterns into a single regular expression.
    opt.patterns='|'.join(['(%s)'%x.replace('(','(?:') for x in opt.patterns])
    try:
      opt.patterns=re.compile(opt.patterns,opt.re_flags)
    except re.error as e:
      die('Internal RE error (%s): %r'%(' '.join(e.args),opt.patterns))

  for s in get_input_lines(opt.file):
    # Scan each line for matches to our patterns and insert highlighting.
    m=opt.patterns.search(s)
    if m!=None or not opt.grep:
      while m:
        g=m.groups()
        if not g:
          break
        for i in range(len(g)):
          if g[i]!=None:
            break
        if opt.comment_mode:
          highlight=colorOf(i+1)
        else:
          highlight=colorOf(i)
        j,k=m.span()
        #print 'j=%d k=%d match=%r'%(j,k,g[i])
        s=s[:j]+highlight+s[j:k]+str(ansi.norm)+s[k:]
        m=opt.patterns.search(s,k+len(highlight)+len(str(ansi.norm)))
      sys.stdout.write(s)
      sys.stdout.flush()
