#!/usr/bin/env python2

import argparse,atexit,datetime,json,os,re,socket,ssl,StringIO,subprocess,sys,time,threading
from pprint import pprint

# Put a little extra effort into finding our non-standard modules if needed.
try:
  import ansi,loggy
  from english import nounf
  from handy import die,prog,Spinner
except:
  sys.path.insert(1,os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])),'pylib'))
  sys.path.insert(1,os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])),'lib','python'))
  import ansi,loggy
  from handy import die,prog,Spinner

norm_text,host_text,port_text,error_text,warn_text,neg_text=ansi.Palette('white on black,cyan,green,red,yellow,red on yellow')

def neg_check(n):
  """Return some brightly colored version of n if it is less than 0.
  Otherwise, simply return the string value of n."""

  if isinstance(n,basestring):
    if n.startswith('-'):
      n=neg_text(n)
    return n
  return (str(n),neg_text(n))[n<type(n)(0)]

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Shamelessly stolen and altered from Python 2.6's ssl module because that
# module's version of get_server_certificate() doesn't have a timeout
# parameter, and that's not a capability I can add with a wrapper.
#

def get_server_certificate_with_to(addr,ssl_version=ssl.PROTOCOL_SSLv23,ca_certs=None,timeout=None):

  """Retrieve the certificate from the server at the specified address,
  and return it as a PEM-encoded string. If 'ca_certs' is specified,
  validate the server cert against it. If 'ssl_version' is specified,
  use it in the connection attempt."""

  # This *might* be a solution to the "No SNI provided; please fix your client."
  # responses from Google's web services.
  # https://github.com/boto/boto/commit/79142a02aa14ba74d66c5a8bf7daf2829892abf9

  if (ca_certs is not None):
    cert_reqs=ssl.CERT_REQUIRED
  else:
    cert_reqs=ssl.CERT_NONE
  s=ssl.wrap_socket(ssl.socket(),ssl_version=ssl_version,cert_reqs=cert_reqs,ca_certs=ca_certs)
  if timeout!=None:
    # This is the only added functionality.
    s.settimeout(timeout)
  s.connect(addr)
  dercert=s.getpeercert(True)
  s.close()
  return ssl.DER_cert_to_PEM_cert(dercert)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

class Certificate(object):
  def __init__(self,service,timeout=None):
    self.host,self.port=service
    self.service="%s:%s"%(self.host,self.port)
    # Store the values we get back we get out of the cert itself in this dict.
    self.values={}
    # Retrieve the certificate, and put it into a file.
    t0=time.time()
    try:
      cert=get_server_certificate_with_to(service,ssl_version=2,timeout=timeout)
    except (socket.gaierror,socket.error) as e:
      t1=time.time()
      self.error=re.sub(r'^\[.*\] ','',str(e))
    except Exception as e:
      t1=time.time()
      print 'Debug: (%s) e=%r'%(type(e),e)
      self.error=str(e)
    else:
      t1=time.time()
      self.error=None
    self.query_seconds=t1-t0
    if self.error:
      return
    fn=os.path.join(prog.tempdir,'%s.%d.cert'%(self.host,self.port))
    f=open(fn,'w')
    f.write(cert)
    f.close()
    # Let openssl do the x509 parsing.
    cmd=("openssl x509 -in %s -noout -text -serial -subject -issuer -email -dates"%(fn,)).split()
    proc=subprocess.Popen(cmd,stdout=subprocess.PIPE)
    output,error=proc.communicate()
    os.unlink(fn)
    for line in output.split('\n'):
      #print 'D: line=%r'%(line,)
      parts=line.split('=',1)
      #print 'D: parts=%r'%(parts,)
      if len(parts)==2:
        var,val=[p.strip() for p in parts]
        if '.' in var:
          continue
        if var in ('notBefore','notAfter'):
          while True:
            try:
              # This is truly bizarre, but when run from within a thread, this
              # call to strptime() gets an AttributeError, but only very
              # intermittently. This while and try logic is my kludge around
              # this. All the other calls seem to be doing fine.
              val=datetime.datetime.strptime(val,'%b %d %H:%M:%S %Y %Z')
              break
            except AttributeError as e:
              #sys.stderr.write('D: %s: %s\n'%(threading.currentThread().getName(),e))
              time.sleep(0.1)
        self.values[var]=val
        if var=='notAfter':
          val-=datetime.datetime.now()
          self.values['timeRemaining']=val
          self.values['daysRemaining']=val.days
      elif 'DNS:' in line:
        self.values['names']=[
          y[4:] for y in [
            x.strip() for x in line.split(',')
          ] if y.startswith('DNS:')
        ]

  def __getattr__(self,key):
    return self.values.get(key,None)

  def toDict(self):
    d=dict(error=self.error,query_seconds=self.query_seconds,timeRemaining=None,daysRemaining=None)
    d.update(self.values)
    return d

# Deal with command line arguments.
ap=argparse.ArgumentParser(description="Get certificate expiration data. The HOST:PORT command line arguments may also be supplied, one per line, on standard input.")
ap.add_argument('-c','--color',dest='color',action='store_true',default=False,help="Turn on colored output.")
ap.add_argument('--json',dest='format',action='store_const',const='json',default='text',help="Use JSON as output format.")
ap.add_argument('-w','--warn',dest='warn',default=None,type=int,help="Output only warnings about certs expiring within the given number of days.")
ap.add_argument('--summary',dest='summary',action='store_true',default=False,help="""Only summarize each host:port argument's certificant's "valid from ___ to ___" information.""")
ap.add_argument('--light',dest='light',action='store_true',default=False,help="Use colors suitable for a light background.")
ap.add_argument('--log-facility',dest='log_facility',metavar='FACILITY',action='store',default='local0',help="Log to the given syslog facility. (default: %(default)s)")
ap.add_argument('--log-level',dest='log_level',metavar='LEVEL',action='store',default='info',help="Log at the given level. (default: %(default)s)")
ap.add_argument('--timeout',dest='timeout',metavar='SECS',action='store',type=int,default=20,help="Number of seconds to wait for any given certificate. (default: %(default)s)")
ap.add_argument('services',metavar='HOST:PORT',nargs='*',help="One or more HOST:PORT arguments.")
opt=ap.parse_args()

# Adjust log level first (if needed).
log=loggy.get_logger(facility=opt.log_facility,level=opt.log_level)

# Get our saved config data if it's available.
opt.data_file=os.path.expanduser("~/.%s.json"%(prog.name,))
if os.path.exists(opt.data_file):
  f=open(opt.data_file)
  try:
    opt.data=json.load(f)
  except Exception as e:
    sys.stderr.write("%s: Error reading %s: %s\n"%(prog.name,opt.data_file,e))
    sys.exit(1)
  f.close()
else:
  opt.data=dict(options={},services=[])

# Adjust our colors for a light-background palette if needed.
if opt.light:
  norm_text,host_text,port_text,error_text,warn_text,neg_text=ansi.Palette('norm black on white,white on blue,bold magenta on blue,norm white on red,black on yellow,red')
  #norm_text,host_text,port_text,error_text,warn_text,neg_text=ansi.Palette('black on white,blue,magenta,red,black on yellow,red')

# Cook some of our other command line options a bit.
ansi.enabled=(opt.color or sys.stdout.isatty()) and opt.format=='text'
if not sys.stdin.isatty():
  opt.services.extend([line.strip() for line in sys.stdin])
if not opt.services:
  if opt.data["services"]:
    opt.services=[
      "%s:%d"%(s['host'],s['port']) for s in opt.data["services"]
    ]
  else:
    ap.print_help()
    sys.exit(1)
for i in range(len(opt.services)):
  try:
    host,port=opt.services[i].split(':')
    opt.services[i]=(host,int(port))
  except:
    die("Bad HOST:PORT argument: %r"%(opt.services[i]))

def add_cert(service):
  """This simply runs in a thread. The service argument is a (host,port)
  tuple."""

  connections.acquire()
  log.info("Queuinig %s:%d for SSL cert retrieval"%service)
  certs[service]=Certificate(service,timeout=opt.timeout)
  c=certs[service]
  if certs[service].error:
    log.error("Error (%s) from %s:%d after %0.3f seconds"%(c.error,service[0],service[1],c.query_seconds))
  else:
    log.info("Retrieved cert from %s:%d, valid from %s to %s"%(service[0],service[1],c.notBefore,c.notAfter))
  connections.release()

# Retrieve all our certs in a dict keyed by (host,port) tuples.
certs={}
connections=threading.Semaphore(32) # Allow only up to 32 concurrent cert retrievals.

# Create and start our threads.
log.info("Starting retrieval of %s"%nounf('certificate',len(opt.services)))
for service in opt.services:
  threading.Thread(name='%s:%s'%service,target=add_cert,args=(service,)).start()

# Wait for all our threads (except the main thread) to finish.
spinner=Spinner(Spinner.cylon,True)
while threading.activeCount()>1:
  sys.stderr.write('Waiting for %s to finish [%s] \r'%(nounf('thread',threading.activeCount()-1),spinner()))
  time.sleep(0.1)
sys.stderr.write((' '*(prog.term_width-1))+'\r')
log.info("Finished retrieval of %s"%nounf('certificate',len(opt.services)))
# Now that we've retrieved our certs in the order given to us, we'll sort
# them alphabetically by hostname and numerically by port number.
opt.services.sort()

if opt.summary:
  # Only summarize each certificate's "valid from ___ to ___" information.
  now=datetime.datetime.now()
  soon=now+datetime.timedelta(30)
  for service in opt.services:
    c=certs[service]
    if c.notBefore and c.notAfter:
      if c.notAfter<now:
        info=error_text('Expired cert valid from %s to %s'%(c.notBefore,c.notAfter))
      elif c.notAfter<soon:
        info=warn_text('Expiring cert valid from %s to %s'%(c.notBefore,c.notAfter))
      elif c.notBefore>now:
        info=error_text('Premature cert valid from %s to %s'%(c.notBefore,c.notAfter))
      else:
        info=norm_text('Current cert valid from %s to %s'%(c.notBefore,c.notAfter))
    else:
      info=error_text('error (%s) after %0.3f seconds'%(c.error,c.query_seconds))
    host_text(service[0]),port_text(service[1])
    ansi.paint(host_text,service[0],':',port_text,service[1],norm_text,' ',info)
  sys.exit(0)

if opt.warn!=None:
  warnings=dict([
    ((c.host,c.port),c.toDict())
    #('%s%s%s'%(host_text(c.host),port_text(c.port)),c.toDict())
      for c in certs.values()
        if c.daysRemaining<opt.warn
  ])
  if opt.format=='text':
    services=warnings.keys()
    services.sort(key=lambda s:warnings[s]['daysRemaining'])
    print 'Certificates expiring in the next %s:'%nounf('day',opt.warn)
    for s in services:
      h,p=s # Extract host and port from service s.
      info=warnings[s]['daysRemaining']
      if info==None:
        info=error_text('error (%s) after %0.3f seconds'%(warnings[s]['error'],warnings[s]['query_seconds']))
      else:
        info=norm_text("%s "%nounf('day',info))
        info+=warn_text('(%s)'%warnings[s]['notAfter'])
      ansi.paint(host_text,h,':',port_text,p,norm_text,' ',info)
      #print '%s: %s'%(s,info)
  elif opt.format=='json':
    print json.dumps(warnings,indent=2,sort_keys=True,default=str)
else:
  # "Normal" output, which outputs everything we know about these certs.
  if opt.format=='text':
    for service in opt.services:
      c=certs[service]
      print norm_text('%s'%(c.service,))
      if isinstance(c.names,list):
        print norm_text('  names=%s'%(', '.join(c.names)))
      else:
        print norm_text('  names=%s'%(c.names,))
      print norm_text('  serial=%s'%(c.serial,))
      print norm_text('  subject=%s'%(c.subject,))
      print norm_text('  issuer=%s'%(c.issuer,))
      print norm_text('  notBefore=%s'%(c.notBefore,))
      if c.daysRemaining!=None and c.daysRemaining<=30:
        print norm_text('  notAfter=%s'%warn_text(c.notAfter))
        print norm_text('  timeRemaining=%s'%warn_text(c.timeRemaining))
        print norm_text('  daysRemaining=%s'%warn_text(c.daysRemaining))
      else:
        print norm_text('  notAfter=%s'%(c.notAfter,))
        print norm_text('  timeRemaining=%s'%(c.timeRemaining,))
        print norm_text('  daysRemaining=%s'%(c.daysRemaining,))
      if c.error==None:
        print norm_text('  error=%s'%(c.error,))
      else:
        print norm_text('  error=%s'%error_text(c.error))
      print norm_text('  query_seconds=%0.3f'%(c.query_seconds,))
      print norm_text('')
  elif opt.format=='json':
    # Output certs as a JSON dictionary. The diction
    print json.dumps(
      dict([("%s:%d"%s,certs[s].toDict()) for s in opt.services]),
      indent=2,       # Make our JSON output more readable to human eyes.
      sort_keys=True, # Keep the output order predictable.
      default=str     # This makes datetime's classes serializable.
    )
