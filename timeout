#!/usr/bin/env python2

DEFAULT_TIMEOUT=10

import optparse,errno,pipes,signal,subprocess,os,sys

# This context manager class implements timeout functionality in a way
# that's easy to use within a "with" block.

class Timeout(object):
  class Error(Exception):
    "Timeout.Error is raised if the timer expires."

    pass

  def __init__(self,seconds=10,error_msg=os.strerror(errno.ETIME)):
    self.seconds=seconds
    self.error_msg=error_msg

  def handler(self, signum, frame):
    raise self.Error(self.error_msg)

  def __enter__(self):
    # Set the SIGALRM handler and start the timer.
    signal.signal(signal.SIGALRM,self.handler)
    signal.alarm(self.seconds)

  def __exit__(self, type, value, traceback):
    # Make sure out timer stops one way or another.
    signal.alarm(0)
    #signal.signal(signal.SIGALRM,None)

  def __repr__(self):
    return '%s(%r,%r)'%(self.__class__.__name__,self.seconds,self.error_msg)

# Set up our command line option and argument handling.

def die(msg=None,rc=1):
  if msg:
    sys.stderr.write('%s: %s\n'%(os.path.basename(sys.argv[0]),msg))
  sys.exit(rc)

op=optparse.OptionParser(
  usage="""Usage: %%prog [OPTIONS] command [ARGUMENTS]

%%prog runs the given command, passing it any arguments you provide, in
a timed environment. By default, the command will be allowed to run for
%r seconds. If the command terminates within this time, %%prog will
simply terminate with the exit code of the completed command. Otherwise,
a message will be written to standard error, and %%prog will terminate
with an exit code of 1 (by default)."""%(DEFAULT_TIMEOUT,))
op.add_option('-t','--timeout',dest='timeout',type=int,default=DEFAULT_TIMEOUT,help="The number of seconds (a positive integer value) expressing how long the given command will be allowed to run. After this interval, it will be killed. (default: %default)")
op.add_option('-m','--message',dest='message',default=os.strerror(errno.ETIME),help="This message is written to standard error if the given command is still running when the timeout interval elapses. (default: %default) Use -m '' to suppress this timeout output altogether.")
op.add_option('-r','--timeout-result',dest='timeout_result',type=int,default=1,help="This is exit code returned to the operating system if the given command is still running when the timeout interval elapses. This must be an integer from 0 to 255. (default: %default)")
opt,args=op.parse_args()
if opt.timeout<1:
  die("--timeout value of %d is not a positive integer."%(opt.timeout,))
if not 0<=opt.timeout_result<=255:
  die("--timeout-result value of %d is not in the range from 0 to 255."%(opt.timeout_result,))
if not args:
  die("No command given.")

try:
  with Timeout(opt.timeout,opt.message):
    cmd=' '.join([pipes.quote(x) for x in args])
    rc=subprocess.call(
      cmd,
      stdin=sys.stdin,
      stdout=sys.stdout,
      stderr=sys.stderr,
      shell=True
    )
    sys.exit(rc)
except Timeout.Error,e:
  msg=str(e)
  if msg:
    msg+=': '+cmd
  die(msg,opt.timeout_result)
except Exception,e:
  raise
