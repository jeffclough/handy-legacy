#!/usr/bin/env python3

import argparse,csv,errno,os,re,sys
from debug import DebugChannel

dc=DebugChannel(False,stream=sys.stdout,line_fmt='{label:.1}: {basename}:{function}:{line}: {indent}{message}\n')

def die(msg,rc=1):
  if msg:
    print(f"{os.path.basename(sys.argv[0])}: {msg}")
  sys.exit(rc)

class CsvDialectError(Exception):
  pass

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Set up something to parse and hold CSV dialects.

re_dialect=re.compile(
  '^'
  '(?P<delimiter>.)'
  '(?P<quotechar>.)'
  '(?P<quoting>[amNn])'
  '(?P<doublequote>[ft])'
  '(?P<escapechar>.)'
  '(?P<skipinitialspace>[ft])'
  '(?P<commentchar>.)'
)

quoting_map=dict(
  a=csv.QUOTE_ALL,
  m=csv.QUOTE_MINIMAL,
  N=csv.QUOTE_NONNUMERIC,
  n=csv.QUOTE_NONE
)

class LocalDialect(csv.Dialect):
  """Make it a simple thing to concoct any silly CSV dialect we can
  think of."""

  def __init__(self,**kwargs):
    """Let the user give keyword arguments for dialectic elements (with
    reasonable defaults for those not given): delimiter (','), quotechar
    ('"'), quoting (csv.QUOTE_MINIMAL), doublequote (True), escapechar
    ('\\'), skipinitialspace (False), and lineterminator (the system
    default line terminator string)."""

    self.delimiter=kwargs.get('delimiter',',')
    self.quotechar=kwargs.get('quotechar','"')
    self.escapechar=kwargs.get('escapechar','\\')
    self.doublequote=kwargs.get('doublequote',True)
    self.skipinitialspace=kwargs.get('skipinitialspace',False)
    self.lineterminator=kwargs.get('lineterminator',os.linesep)
    self.quoting=kwargs.get('quoting',csv.QUOTE_MINIMAL)
    self.commentchar=kwargs.get('commentchar','#')

  def __str__(self):
    return ''.join(['%s'%(getattr(self,v),'') for v in ('delimiter','quotechar','quoting','doublequote','escapechar','skipinitialspace','commentchar')])

  def __repr__(self):
    return 'LocalDialect(%s)'%','.join([
      '%s=%r'%(v,getattr(self,v))
        for v in ('delimiter','quotechar','quoting','doublequote','escapechar','skipinitialspace','commentchar')
    ])

def parse_dialect(dialect_spec):
  """Parse a dialect string, and return a LocalDialect instance that is
  configured accordingly."""

  dc(f"dialect_spec={dialect_spec!r}")

  # Supply defaults for any unspecified elements of the dialect string.
  if len(dialect_spec)<len(default_dialect_spec):
    dialect_spec+=default_dialect_spec[-(len(default_dialect_spec)-len(dialect_spec)):]

  # Validate and parse the dialect string using a regular expression.
  m=re_dialect.match(dialect_spec)
  if m==None:
    raise CsvDialectError(dialect_spec)

  # Cook the non-literal values.
  d=m.groupdict()
  dc(f"d={d!r}")
  try:
    d['quoting']=quoting_map[d['quoting']]
  except KeyError:
    raise CsvDialectError(dialect_spec)
  except:
    raise
  d['doublequote']=d['doublequote']=='t'
  d['skipinitialspace']=d['skipinitialspace']=='t'
  d['lineterminator']=os.linesep
  return LocalDialect(**d)

def parse_range(s):
  '''Convert string list of ranges into a list of (n,m) range tuples.'''

  ranges=[x.strip() for x in s.split(',')]
  f=[]
  for r in ranges:
    r=r.split('-')
    if len(r)==1:
      m=int(r[0])
      n=m-1
    else:
      n,m=r
      if n=='':
        n=0
      else:
        n=int(n)-1
      if m=='':
        m=None
      else:
        m=int(m)
    f.append((n,m))
  return f

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Wrangle the command line.

default_dialect_spec=',"mt\\f#'

ap=argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description="""\
This program does for CSV data what the traditional "cut" command does for
regular text files.

CSV DIALECT SYNTAX
CSV formatting is a loose standard with dialectic flexability. These are the
parameters involved:

    SEP:     Field separator character. (default: ,)
    Q:       Quote character. (default: ")
    QSTYLE:  Quoting style. One of 'a' (all), 'm' (minimal, the default),
             'N' (non-numeric), or 'n' (none).
    DQUOTE:  Represent a literal quote as two consecutive quotes. Either
             't' (for True, the default) or 'f' (for False).
    ESC:     The escape charater, which makes the next character a literal.
             (default: \\)
    SKIPWS:  Skip whitespace immediately following a field separator. Either
             't' (for True) or 'f' (for False, the default).
    COMMENT: The character, if any, that makes a CSV line a comment IF it is
             the first character on that line. (default: '#')

All this put together looks like SEP[Q[QSTYLE[DQUOTE[ESC[SKIPWS]]]]] and is a
single string of up to seven characters.
""")

ap.add_argument('-j',dest='joinfields',action='store',help="""Join the given field range into a sinigle field separated by a single character. The first character of the JOINFIELDS value is the firld separator. The remainder of JOINFIELDS is the same field range syntax described below for -f. Also, -j renumbers fields as they are joined. So if "-j ' 1-2'" is given, fields 1 and 2 are joined as field 1, and any subsequent fields are renumbered beginning with 2. This is important to remember if you're also using the -f option because -f is evaluated after -j.""")
ap.add_argument('-f',dest='fields',action='store',help="""Output only these fields. FIELDS is made up of one range or two or more ranges separated by commas. Each range is one of "N" (the Nth field), "N-" (from the Nth to the last field), "N-M" (from the Nth to the Mth field). Fields are counted beginning with 1, and all ranges are inclusive. By default, all fields are available for output.""")
ap.add_argument('-o',dest='fmt',action='store',help="""Specify a format string outputting the fields. Use %%1, %%2, etc for output. Note that fields excluded by the -f option (if given) are not counted. I.e., If "-f3-5,7" is given, input field 3 becomes output field 1, 4 becomes 2, 5 becomes 3, and 7 becomes 4. In the absence of this option, the output format is CSV.""")
ap.add_argument('--skip',action='store',type=int,default=0,help="""Skip the first SKIP lines of input. This is useful for skipping over a row of headings.""")
ap.add_argument('--icond',action='store',help="""A Python expression evaluated just after each input record is read. That record will be processed only if the expression evaluates to a value Python regards as True.""")
ap.add_argument('--limit',action='store',type=int,help="""Limit the output to to the first LIMIT lines.""")
ap.add_argument('--strip',action='store',default='',help="""Either "l", "r", or "lr", depending on whether whitespace should be removed from the left, right, or both sized of each field. (Nothing is stripped by default.)""")
ap.add_argument('--ocond',action='store',help="""A Python expression evaluated just before each output record is written. That record will be written only if the expression evaluates to a value Python regards as True.""")
ap.add_argument('--reader',metavar='DIALECT',action='store',default=default_dialect_spec,help="""Specify the CSV DIALECT of the CSV reader (default: %(default)r)""")
ap.add_argument('--writer',metavar='DIALECT',action='store',default=default_dialect_spec,help="""Specify the CSV DIALECT of the CSV writer (default: %(default)r)""")
ap.add_argument('files',metavar='FILE',action='store',nargs='*',help="""Names of CSV files to be read and processed one at a time.""")

opt=ap.parse_args()
dc("Raw Options:").indent()
dc(f"opt.joinfields={opt.joinfields!r}")
dc(f"opt.fields={opt.fields!r}")
dc(f"opt.skip={opt.skip!r}")
dc(f"opt.limit={opt.limit!r}")
dc(f"opt.strip={opt.strip!r}")
dc(f"opt.reader={opt.reader!r}")
dc(f"opt.writer={opt.writer!r}")
dc.undent()

# Cook -j's value to be more useful.
if opt.joinfields:
  opt.joinchar=opt.joinfields[0]
  opt.joinfields=parse_range(opt.joinfields[1:])
  opt.joinfields.reverse()
else:
  opt.joinfields=[]
# Cook -f's value to be more useful.
if opt.fields:
  opt.fields=parse_range(opt.fields)
# Parse reader and writer dialects.
opt.reader=parse_dialect(opt.reader)
opt.writer=parse_dialect(opt.writer)
# Set up for stripping leading and/or trailing whitespace from each output field.
if 'l' in opt.strip and 'r' in opt.strip:
  opt.strip=lambda s:s.strip()
elif 'l' in opt.strip:
  opt.strip=lambda s:s.lstrip()
elif 'r' in opt.strip:
  opt.strip=lambda s:s.rstrip()
else:
  opt.strip=None
# Replace tabs, newlines, and carriage returns in our format with the actual characters.
if opt.fmt:
  opt.fmt=opt.fmt.replace(r'\r','\r').replace(r'\n','\n').replace(r'\t','\t')

dc("Cooked Options:").indent()
dc(f"opt.joinfields={opt.joinfields!r}")
dc(f"opt.fields={opt.fields!r}")
dc(f"opt.strip={opt.strip!r}")
dc(f"opt.reader={opt.reader!r}")
dc(f"opt.writer={opt.writer!r}")
dc.undent()

writer=csv.writer(sys.stdout,dialect=opt.writer)

def cut(reader):
  IRN=0
  for irec in reader:
    dc(f"irec={irec!r}")
    # Skip comment lines without counting them as input lines.
    if irec and irec[0].lstrip().startswith(opt.reader.commentchar):
      continue
    # Skip initial lines according to opt.skip.
    IRN+=1
    dc(f"input record {IRN}: {irec!r}")
    if IRN<=opt.skip:
      continue
    # Stop outputting rows if we've output all we should.
    if opt.limit and IRN>opt.skip+opt.limit:
      break

    # Join any fields we've been told to.
    for n,m in opt.joinfields:
      irec[n:m]=[opt.joinchar.join([x for x in irec[n:m] if x])]
    dc(f"joined record {IRN}: {irec!r}")

    # Make list of only the fields we want to keep.
    if opt.fields:
      orec=[]
      for n,m in opt.fields:
        orec.extend(irec[n:m])
      dc(f"culled record {IRN}: {irec!r}")
    else:
      orec=irec

    # Strip leading and/or trailing whitespace if called for.
    if opt.strip:
      orec=[opt.strip(x) for x in orec]

    if opt.fmt:
      s=opt.fmt
      field_indices=list(range(len(orec)-1,-1,-1))
      for i in field_indices:
        s=s.replace(f"%{i+1}",orec[i])
      print(s)
    else:
      writer.writerow(orec)

# If standard input is being redirected, reat that first.
if not sys.stdin.isatty():
  cut(csv.reader(sys.stdin,dialect=opt.reader))

# Read any files given as arguments on the command line.
for filename in opt.files:
  with open(filename,'r',newline='',encoding='utf-8') as f:
    cut(csv.reader(f))
