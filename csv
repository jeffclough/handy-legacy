#!/usr/bin/env python3

import csv,locale,optparse,os,pipes,re,shlex,sys
import OptionParserFormatters
from handy import die,shellify
from functools import reduce

#locale.setlocale(locale.LC_ALL, '')

#def die(msg,rc=1):
#  if msg:
#    sys.stderr.write(os.path.basename(sys.argv[0])+': '+msg+'\n')
#  sys.exit(rc)
  
def numeric(x):
  """Return the numeric value of x if x can be interpreted as either
  integer or float. Otherwise, return the original value of x.
  
  >>> numeric('4')
  4
  >>> numeric('3.25')
  3.25
  >>> numeric('testing')
  'testing'
  """

  y=str(x)
  with contextlib.suppress(ValueError): return int(y)
  with contextlib.suppress(ValueError): return float(y)
  return x

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Make working with CSV dialects a little easier.
#

default_dialect=dict(
  delimiter=',',
  quotechar='"',
  quoting=csv.QUOTE_MINIMAL,
  doublequote=True,
  escapechar='\\',
  skipinitialspace=False,
  commentchar='#',
  lineterminator='\n',
)

class CsvDialectError(Exception):
  pass

re_dialect=re.compile(
  (
    '(?P<delimiter>.)'
    '(?P<quotechar>.)'
    '(?P<quoting>.)'
    '(?P<doublequote>[ft])'
    '(?P<escapechar>.)'
    '(?P<skipinitialspace>[ft])'
    '(?P<commentchar>.)'
    '(?P<linesep>.*)'
  ),
  re.DOTALL # required for <linesep> to match newline characers.
)

class CsvDialect(csv.Dialect):
  """Make it a simple thing to concoct any silly CSV dialect we can
  think of.
  
  >>> print repr(CsvDialect())
  CsvDialect(delimiter=',',quotechar='"',escapechar='\\\\',doublequote=True,skipinitialspace=False,lineterminator='\\n',quoting=0)
  """
  #>>> print repr(CsvDialect("|'"))
  #CsvDialect(delimiter='|',quotechar="'",escapechar='\\\\',doublequote=True,quoting=0,skipinitialspace=False,commentchar='#',lineterminator='\\n')

  # This spec string contains default values.
  default_spec_string=',"mt\\f#'+os.linesep

  # This is how our quote style character maps to quoting styles in Python's csv module.
  quoting_map=dict(
    a=csv.QUOTE_ALL,
    m=csv.QUOTE_MINIMAL,
    N=csv.QUOTE_NONNUMERIC,
    n=csv.QUOTE_NONE
  )
  quoting_revmap=dict([(v,k) for k,v in quoting_map.items()])

  def __init__(self,*args,**kwargs):
    """Let the user give keyword arguments for dialectic elements (with
    reasonable default for those not given): delimiter (','), quotechar
    ('"'), quoting (csv.QUOTE_MINIMAL), doublequote (True), escapechar
    ('\\'), skipinitialspace (False), and lineterminator (the system
    default line terminator string)."""

    if len(args)>0:
      if len(args)>1:
        raise CsvDialectError("Programming error! Too many positional arguments %r to %s()"%(tuple(args),self.__class__.__name__))
      self.setFromString(args[0])
    # Keyword arguments can overide any dialect string that was given. This is
    # also where defaults are applied if needed.
    for var,dval in default_dialect.items():
      if var in kwargs:
        setattr(self,var,kwargs[var])
      elif getattr(self,var,None)==None:
        setattr(self,var,dval)

  def setFromString(self,spec):
    """Parse a dialect string, and return a CsvDialect instance that is
    configured accordingly."""

    # Supply defaults for any unspecified elements of the dialect string.
    if len(spec)<len(CsvDialect.default_spec_string):
      spec+=CsvDialect.default_spec_string[-(len(CsvDialect.default_spec_string)-len(spec)):]

    # Validate and parse the dialect string using a regular expression.
    m=re_dialect.match(spec)
    if m==None:
      raise CsvDialectError("Bad CSV dialect specification: %r"%(spec,))

    # Store this spec's values in this CsvDialect object.
    d=m.groupdict()
    try:
      self.quoting=CsvDialect.quoting_map[d['quoting']]
    except KeyError:
      raise CsvDialectError("Bad quoting style (%r) in CSV dialect specification (%r)"%(d['quoting'],spec))
    except:
      raise
    self.delimiter=d['delimiter']
    self.quotechar=d['quotechar']
    self.escapechar=d['escapechar']
    self.doublequote=d['doublequote']=='t'
    self.skipinitialspace=d['skipinitialspace']=='t'
    self.commentchar=d['commentchar']
    if self.commentchar==' ':
      self.commentchar=''
    #self.lineterminator=spec[7:] # Because d['lineterminator'] doesn't see the '\n' on the end of the string.
    self.lineterminator=d['linesep']
    return CsvDialect(**d)

  def __repr__(self):
    return '%s(%s)'%(self.__class__.__name__,','.join(['%s=%r'%(a,getattr(self,a)) for a in ('delimiter','quotechar','quoting','escapechar','doublequote','skipinitialspace','commentchar','lineterminator')]))

  def __str__(self):
    return "%r"%(
      self.delimiter+
      self.quotechar+
      CsvDialect.quoting_revmap[self.quoting]+
      'ft'[self.doublequote]+
      self.escapechar+
      'ft'[self.skipinitialspace]+
      self.lineterminator
    )

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Handle the command line.
#

op=optparse.OptionParser(
  formatter=OptionParserFormatters.IndentedHelpFormatterWithNL(2,8),
  usage="""Usage:
  Form 1: %prog [OPTIONS] [value-1 ... value-n]
    Input MUST be formatted as parsable CSV.

  Form 2: %prog --infmt=excel [--worksheet=WORKSHEET] [OPTIONS] [value-1 ... value-n]
    Input MUST be an Excel spreadsheet. The first worksheet will be used unless named.

  Form 3: %prog --infmt=shell [OPTIONS] [value-1 ... value-n]
    Input MUST be lines of shell-escaped and -quoted values.""",
  description="""This command reads data from standard input in either CSV (by default), Excel, or shell format and writes it to standard output as CSV (by default), shell, or either of two tabular format: table and markdown. The CSV dialects used for reading and writing need not be the same and can be specified using the --reader (in the case of Form 1) and --writer options.

Regardless of which usage form is used, data values may be given as command line arguments to supply a row of data that will be appear as the first line of output. Typically, this is used to output column headings, (e.g.: 'First name' Last\ name email account zipcode), but it could just as easily be a row of actual data. Just in case it's not obvious, any data given on the command line in this way is not CSV-formatted. It is parsed by your shell, so use proper escapes and quoting to distinguish one argument (data value) from another.

The output format defaults to CSV (--outfmt=csv), but it can also be set to shell, table, or markdown. If shell, each line of output is a list environment variable assignments separated by semicolons. This REQUIRES that the first line of input data consists of column headings that are valid when used to name environment variables. If --outfmt=table is used, consider using --headings 1 (or 2 or whatever) to say how many lines of input should be treated as column headings. (The default is 0.) "-box" (the default) or "-ascii" can also be appended to "table" to determine whether box-drawing characters of normal ASCII characters are used to separate one column from another and heading roles from data rows. --outfmt=markdown is just like table output, but output is formatted as a Markdown table."""
)
op.add_option('--headings',dest='heading_lines',action='store',type=int,default=0,
help="Specify how many rows (lines) of heading data are in the input. (default: %default)")
op.add_option('--infmt',dest='infmt',action='store',choices=('csv','excel','shell'),default='csv',
help="Specify either csv, excel, or shell as the input format. See the usage and description above for details. (default: %default)")
op.add_option('--reader',dest='reading',metavar='DIALECT',action='store',default=CsvDialect.default_spec_string,
help="""Specify the CSV reader's dialect as SEP[Q[QSTYLE[DQUOTE[ESC[SKIPWS[EOL]]]]]]. This is a single string of up to five characters:
    SEP: Field separator character. (default: ,)
    Q: Quote character. (default: ")
    QSTYLE: Quoting style. One of 'a' (all), 'm' (minimal, the default), 'N' (non-numeric), or 'n' (none).
    DQUOTE: Represent a literal quote as two consecutive quotes. Either 't' (the default) or 'f'.
    ESC: The escape charater, which makes the next character a literal. (default: \\)
    SKIPWS: Skip whitespace immediately following a field separator. Either 't' or 'f' (the default).
    EOL: The string that terminates every csv row. This is the only part of the dialect specification than can be more than one character in length. (default: %r)"""%(os.linesep,))
op.add_option('--outfmt',dest='outfmt',action='store',default='csv',
help="Specify either csv, shell, table, table-ascii, table-box, table-nosep, or markdown as the output format. See the usage and description above for details. (default: %default)")
op.add_option('--writer',dest='writing',metavar='DIALECT',action='store',default=CsvDialect.default_spec_string,
help="Specify the CSV writer's dialect, using the same syntax as for --reader. (default: %r)"%(CsvDialect.default_spec_string,))
#op.add_option('--csv',dest='infmt',action='store_const',const='csv',default='csv',
#help="Set the input format to CSV. (This is the default.)")
#op.add_option('--excel',dest='infmt',action='store_const',const='excel',
#help="Set the input format to Excel.")
op.add_option('--worksheet',dest='worksheet',metavar='NAME_or_NUMBER',action='store',default=None,
help="Give the name or number (starting with 0) of the worksheet to read if --excel was used. If not given, the first worksheet will be read.")
#op.add_option('--shell',dest='infmt',action='store_const',const='shell',
#help="Set the input format to shell. Each line of standard input is parsed for values as a shell would and then written to standard ouptut as CSV.")
op.add_option('--test',dest='test',action='store_true',default=False,help="Run internal tests (for debugging purposes only).")
opt,args=op.parse_args()

# Cook table output format specs a bit. (This is where opt.style comes from.)
if opt.outfmt.startswith('table'):
  if opt.outfmt=='table':
    opt.style='box'
  else:
    opt.style=opt.outfmt[5:]
    if not opt.style.startswith('-'):
      die(f"Bad value for --outfmt: {opt.outfmt!r}")
    opt.style=opt.style[1:]
    if opt.style not in ('ascii','box','nosep'):
      die(f"Bad value for --outfmt: {opt.outfmt!r}")
  opt.outfmt='table'
if opt.outfmt not in ('csv','shell','table','markdown'):
  die(f"Bad value for --outfmt: {opt.outfmt!r}")

#print(f"D: opt.writing={opt.writing!r}")
opt.writing=opt.writing.replace(r'\r','\r').replace(r'\n','\n').replace(r'\t','\t')
#print(f"D: opt.writing={opt.writing!r}")
opt.writing=CsvDialect(opt.writing)
#print(f"D: opt.writing={opt.writing!r}")

if opt.worksheet!=None:
  if opt.infmt!='excel':
    op.error('--worksheet can only be used with --infmt=excel.')
  try:
    opt.worksheet=int(opt.worksheet)
  except:
    pass

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Create writer classes for out shell and table output formats.

class ShellWriter(object):
  """This class has a writerow() method to mimic enough of the interface
  of csv.writer, but out writerow() outputs a line of shell environment
  variable assignment statements separated by semicolons rather than a
  line of csv output.
  
  For this class to do its job, the first call to writerow() must
  contain a list of variable names to be used for every subsequent call
  writerow()."""

  def __init__(self,outfile,**flags):
    """outfile is the open file we are to write data to. The following
    arguments are recognized:

      none_as holds the text to be used to represent None values in the
      output. The default is simply '', but setting it to something like
      'None', 'NULL', or 'N/A' is sometimes helpful.
    """

    self.outfile=outfile
    self.vars=None
    self.none_as=flags.get('none_as','')

  def setHeadings(self,headings):
    self.vars=[str(h) for h in headings]

  def writerow(self,row):
    if not self.vars:
      self.setHeadings(row)
    else:
      # Replace None values with whatever's in self.none_as.
      r=[]
      for val in row:
        if val==None:
          val=self.none_as
        r.append(val)
      # Write our line of shell environment variable assignments.
      self.outfile.write(';'.join([
        '%s=%s'%(var.replace(' ','_'),shellify(val)) for var,val in zip(self.vars,r)
      ]))
      self.outfile.write('\n')

  def writerows(self,rows):
    for row in rows:
      self.writerow(row)

def tabfmt(val,width):
  if isinstance(val,int) or isinstance(val,float):
    return '%*g'%(width,val)
  return '%-*s'%(width,str(val))

class TableWriter(object):
  def __init__(self,outfile,**flags):
    """outfile is the open file we are to write data to. The following
    arguments are recognized:

      style     either "ascii" or "box" (the default).
      none_as   holds the text to be used to represent None values in
                the output. The default is simply '', but setting it to
                something like 'None', 'NULL', or 'N/A' is sometimes
                helpful.
      col_sep   The column separator character in ASCII output.
                (default=' | ')
      haed_sep  The line that separates the first heading line from the
                remaining data lines in ASCII output. (default='-')
      markdown  True if this table is to be output as Markdown.
                (default=False)

    """

    self.outfile=outfile
    self.none_as=flags.get('none_as','')
    self.style=flags.get('style','box')
    if self.style=='box':
      self.col_sep=flags.get('col_sep',' │ ')
      self.head_sep=flags.get('head_sep','─')
    elif self.style=='ascii':
      self.col_sep=flags.get('col_sep',' | ')
      self.head_sep=flags.get('head_sep','-')
    elif self.style=='nosep':
      self.col_sep=flags.get('col_sep',' ')
      self.head_sep=flags.get('head_sep','')
    self.markdown=flags.get('markdown',False)
    self.data=[] # Our list of data rows.

  def writerow(self,row):
    """Only record rows in this writer. The writerows() method is what
    actually writes the output."""

    self.data.append(
      [self.none_as if v is None else v for v in row]
    )

  def writerows(self,rows=None):
    """This works just like the regular csv.reader.writerows() if the rows
    argument refers to data to be written. But if no row data it given,
    we assume all data has been accumulated, and it's time to write out
    the table. This latter behavior is specific to TableWriter instances."""

    if rows is not None:
      # Append the caller's rows to output.
      for row in rows:
        self.writerow(row)
    elif self.data:
      if self.markdown:
        # Write out tabular data as Markdown.
        for r in range(len(self.data)):
          row=self.data[r]
          self.outfile.write('| '+(' | '.join([str(row[c]) for c in range(len(row))]))+'\n')
          #self.outfile.write((''.join(['| '+row[c] for c in range(len(row))]))+'\n')
          if opt.heading_lines>0 and r==opt.heading_lines-1:
            self.outfile.write('|-'*len(row)+'\n')
      else:
        # Compute the width each column requires.
        wid=[
          reduce(max,[len(self.data[r][c]) for r in range(len(self.data))])
            for c in range(len(self.data[0]))
        ]
        # Write out tabular data.
        for r in range(len(self.data)):
          row=self.data[r]
          self.outfile.write(self.col_sep.join([tabfmt(row[c],wid[c]) for c in range(len(row))])+'\n')
          if opt.heading_lines>0 and r<opt.heading_lines:
            if self.style!='nosep':
              # Output a line that separates our heading line(s) from the body of the data.
              self.outfile.write(
                self.col_sep.replace(' ',self.head_sep).replace('│','┼').replace('|','+').join([
                  self.head_sep*wid[c] for c in range(len(row))
                ])+'\n'
              )
      self.data=[]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Set up a reader for whatever type of input we're expecting.
if opt.infmt=='csv':
  opt.reading=CsvDialect(opt.reading.replace(r'\r','\r').replace(r'\n','\n').replace(r'\t','\t'))
  reader=csv.reader(sys.stdin,dialect=opt.reading)
elif opt.infmt=='excel':
  try:
    import xlrd
  except:
    die('3rd-party Python module xlrd (required by --excel) cannot be loaded.')

  def xlsreader(filename,worksheet=0):
    """This is a generator function that returns one row at a time fromt
    the given Excel spreadsheet file. By default, the first worksteet (0)
    is the one that's used."""

    book=xlrd.open_workbook(filename)
    try:
      worksheet=int(worksheet)
    except:
      pass
    if isinstance(worksheet,int):
      try:
        sheet=book.sheet_by_index(worksheet)
      except IndexError:
        die('%s: worksheet %d not found in %s.'%(progname,worksheet,filename))
    else:
      try:
        sheet=book.sheet_by_name(str(worksheet))
      except xlrd.biffh.XLRDError:
        die('%s: worksheet %r not found in %s.'%(progname,str(worksheet),filename))
    r=0
    while r<sheet.nrows:
      yield [x.value for x in sheet.row(r)]
      r+=1

  reader=xlsreader('/dev/stdin',opt.worksheet)
elif opt.infmt=='shell':
  def shellreader(f):
    for line in f:
      if writing_dialog.quoting==csv.QUOTE_NONNUMERIC:
        row=[numeric(val) for val in shlex.split(line)]
      else:
        row=shlex.split(line)
      yield row

  reader=shellreader(sys.stdin)
else:
  die(f"Programming Error! Unknown input format: {opt.infmt!r}")

# Set up a CSV writer.
if opt.outfmt=='csv':
  writer=csv.writer(sys.stdout,dialect=opt.writing)
elif opt.outfmt=='shell':
  writer=ShellWriter(sys.stdout)
elif opt.outfmt=='markdown':
  writer=TableWriter(sys.stdout,markdown=True)
elif opt.outfmt=='table':
  writer=TableWriter(sys.stdout,style=opt.style)
else:
  die(f"Programming Error! Bad --outfmt value: {opt.outfmt!r}")

# This is where unit testing is implemented.
if opt.test:
  import doctest,io
  failed,total=doctest.testmod()
  if failed:
    sys.exit(1)
  sys.exit(0)

# Output the CSV for our command line arguments, if any.
if args:
  writer.writerow(args)

# Read from the reader and write to the writer.
for row in reader:
  #print(f"D: row={row!r}")
  writer.writerow(row)
if opt.outfmt in ('markdown','table'):
  writer.writerows()

