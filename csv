#!/usr/bin/env python

import csv,optparse,os,re,shlex,sys
import OptionParserFormatters

def die(msg,rc=1):
  if msg:
    sys.stderr.write(os.path.basename(sys.argv[0])+': '+msg+'\n')
  sys.exit(rc)
  
def numeric(x):
  """Return the numeric value of x if x can be interpreted as either
  integer or float. Otherwise, return the original value of x.
  
  >>> numeric('4')
  4
  >>> numeric('3.25')
  3.25
  >>> numeric('testing')
  'testing'
  """

  y=str(x)
  try:
    return int(y)
  except:
    pass
  try:
    return float(y)
  except:
    pass
  return x

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Make working with CSV dialects a little easier.
#

default_dialect=dict(
  delimiter=',',
  quotechar='"',
  escapechar='\\',
  doublequote=True,
  skipinitialspace=False,
  lineterminator='\n',
  quoting=csv.QUOTE_MINIMAL
)

class CsvDialectError(Exception):
  pass

re_dialect=re.compile(
  '(?P<delimiter>.)'
  '(?P<quotechar>.)'
  '(?P<quoting>.)'
  '(?P<doublequote>[ft])'
  '(?P<escapechar>.)'
  '(?P<skipinitialspace>[ft])'
  '(?P<linesep>.*)'
)

class CsvDialect(csv.Dialect):
  """Make it a simple thing to concoct any silly CSV dialect we can
  think of.
  
  >>> print repr(CsvDialect())
  CsvDialect(delimiter=',',quotechar='"',escapechar='\\\\',doublequote=True,skipinitialspace=False,lineterminator='\\n',quoting=0)
  """
  #>>> print repr(CsvDialect("|'"))
  #CsvDialect(delimiter='|',quotechar="'",escapechar='\\\\',doublequote=True,skipinitialspace=False,lineterminator='\\n',quoting=0)

  # This spec string contains default values.
  default_spec_string=',"mt\\f'+os.linesep

  # This is how our quote style character maps to quoting styles in Python's csv module.
  quoting_map=dict(
    a=csv.QUOTE_ALL,
    m=csv.QUOTE_MINIMAL,
    N=csv.QUOTE_NONNUMERIC,
    n=csv.QUOTE_NONE
  )
  quoting_revmap=dict([(v,k) for k,v in quoting_map.items()])

  def __init__(self,*args,**kwargs):
    """Let the user give keyword arguments for dialectic elements (with
    reasonable default for those not given): delimiter (','), quotechar
    ('"'), quoting (csv.QUOTE_MINIMAL), doublequote (True), escapechar
    ('\\'), skipinitialspace (False), and lineterminator (the system
    default line terminator string)."""

    if len(args)>0:
      if len(args)>1:
        raise CsvDialectError("Programming error! Too many positional arguments %r to %s()"%(tuple(args),self.__class__.__name__))
      self.setFromString(args[0])
    # Keyword arguments can overide any dialect string that was given. This is
    # also where defaults are applied if needed.
    for var,dval in default_dialect.items():
      if var in kwargs:
        setattr(self,var,kwargs[var])
      elif getattr(self,var,None)==None:
        setattr(self,var,dval)

  def setFromString(self,spec):
    """Parse a dialect string, and return a CsvDialect instance that is
    configured accordingly."""

    # Supply defaults for any unspecified elements of the dialect string.
    if len(spec)<len(CsvDialect.default_spec_string):
      spec+=CsvDialect.default_spec_string[-(len(CsvDialect.default_spec_string)-len(spec)):]

    # Validate and parse the dialect string using a regular expression.
    m=re_dialect.match(spec)
    if m==None:
      raise CsvDialectError("Bad CSV dialect specification: %r"%(spec,))

    # Store this spec's values in this CsvDialect object.
    d=m.groupdict()
    try:
      self.quoting=CsvDialect.quoting_map[d['quoting']]
    except KeyError:
      raise CsvDialectError("Bad quoting style (%r) in CSV dialect specification (%r)"%(d['quoting'],spec))
    except:
      raise
    self.delimiter=d['delimiter']
    self.quotechar=d['quotechar']
    self.escapechar=d['escapechar']
    self.doublequote=d['doublequote']=='t'
    self.skipinitialspace=d['skipinitialspace']=='t'
    self.lineterminator=spec[6:] # Because d['lineterminator'] doesn't see the '\n' on the end of the string.
    return CsvDialect(**d)

  def __repr__(self):
    return '%s(%s)'%(self.__class__.__name__,','.join(['%s=%r'%(a,getattr(self,a)) for a in ('delimiter','quotechar','escapechar','doublequote','skipinitialspace','lineterminator','quoting')]))

  def __str__(self):
    return "%r"%(
      self.delimiter+
      self.quotechar+
      CsvDialect.quoting_revmap[self.quoting]+
      'ft'[self.doublequote]+
      self.escapechar+
      'ft'[self.skipinitialspace]+
      self.lineterminator
    )

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Handle the command line.
#

op=optparse.OptionParser(
  formatter=OptionParserFormatters.IndentedHelpFormatterWithNL(2,8),
  usage="""Usage:
  Form 1: %prog [OPTIONS] [column-1 ... column-n]
    Input MUST be formatted as parsable CSV.

  Form 2: %prog --excel [--worksheet=WORKSHEET] [OPTIONS] [column-1 ... column-n]
    Input MUST be an Excel spreadsheet. The first worksheet will be used unless named.

  Form 3: %prog --shell [OPTIONS] [column-1 ... column-n]
    Input MUST be lines of shell-escaped and -quoted values.""",
  description="""This command reads data from standard input in either CSV (by default), Excel, or shell format and writes it to standard output as properly formatted CSV. The CSV dialects used for reading and writing need not be the same and can be specified using the --reader (in the case of Form 1) and --writer options.

Regardless of which usage form is used, command line arguments can be given to supply a row of data that will be appear as the first line of output. Typically, this is used to output column headings, (e.g.: 'First name' Last\ name email account zipcode), but it could just as easily be a row of data. Just in case it's not obvious, any data given on the command line in this way is not CSV-formatted. It is parsed by your shell, so use proper escapes and quoting to distinguish one argument from another."""
)
op.add_option('--reader',dest='reading',metavar='DIALECT',action='store',default=CsvDialect.default_spec_string,
help="""Specify the CSV reader's dialect as SEP[Q[QSTYLE[DQUOTE[ESC[SKIPWS[EOL]]]]]]. This is a single string of up to five characters:
    SEP: Field separator character. (default: ,)
    Q: Quote character. (default: ")
    QSTYLE: Quoting style. One of 'a' (all), 'm' (minimal, the default), 'N' (non-numeric), or 'n' (none).
    DQUOTE: Represent a literal quote as two consecutive quotes. Either 't' (the default) or 'f'.
    ESC: The escape charater, which makes the next character a literal. (default: \\)
    SKIPWS: Skip whitespace immediately following a field separator. Either 't' or 'f' (the default).
    EOL: The string that terminates every csv row. This is the only part of the dialect specification than can be more than one character in length. (default: %r)"""%(os.linesep,))
op.add_option('--writer',dest='writing',metavar='DIALECT',action='store',default=CsvDialect.default_spec_string,
help="Specify the CSV writer's dialect, using the same syntax as for --reader. (default: %r)"%(CsvDialect.default_spec_string,))
op.add_option('--csv',dest='infmt',action='store_const',const='csv',default='csv',
help="Set the input format to CSV. (This is the default.)")
op.add_option('--excel',dest='infmt',action='store_const',const='excel',
help="Set the input format to Excel.")
op.add_option('--worksheet',dest='worksheet',metavar='NAME_or_NUMBER',action='store',default=None,
help="Give the name or number (starting with 0) of the worksheet to read if --excel was used. If not given, the first worksheet will be read.")
op.add_option('--shell',dest='infmt',action='store_const',const='shell',
help="Set the input format to shell. Each line of standard input is parsed for values as a shell would and then written to standard ouptut as CSV.")
op.add_option('--test',dest='test',action='store_true',default=False,help="Run internal tests (for debugging purposes only).")
opt,args=op.parse_args()

#print 'D: opt.writing=%r'%(opt.writing)
opt.writing=opt.writing.replace(r'\r','\r').replace(r'\n','\n').replace(r'\t','\t')
#print 'D: opt.writing=%r'%(opt.writing)
opt.writing=CsvDialect(opt.writing)
#print 'D: opt.writing=%r'%(opt.writing)

if opt.worksheet!=None:
  if opt.infmt!='excel':
    op.error('--worksheet can only be used with --excel.')
  try:
    opt.worksheet=int(opt.worksheet)
  except:
    pass

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Set up a reader for whatever type of input we're expecting.
if opt.infmt=='csv':
  opt.reading=CsvDialect(opt.reading.replace(r'\r','\r').replace(r'\n','\n').replace(r'\t','\t'))
  reader=csv.reader(sys.stdin,dialect=opt.reading)

elif opt.infmt=='excel':
  try:
    import xlrd
  except:
    die('3rd-party Python module xlrd (required by --excel) cannot be loaded.')

  def xlsreader(filename,worksheet=0):
    """This is a generator function that returns one row at a time fromt
    the given Excel spreadsheet file. By default, the first worksteet (0)
    is the one that's used."""

    book=xlrd.open_workbook(filename)
    try:
      worksheet=int(worksheet)
    except:
      pass
    if isinstance(worksheet,int):
      try:
        sheet=book.sheet_by_index(worksheet)
      except IndexError:
        die('%s: worksheet %d not found in %s.'%(progname,worksheet,filename))
    else:
      try:
        sheet=book.sheet_by_name(str(worksheet))
      except xlrd.biffh.XLRDError:
        die('%s: worksheet %r not found in %s.'%(progname,str(worksheet),filename))
    r=0
    while r<sheet.nrows:
      yield [x.value for x in sheet.row(r)]
      r+=1

  reader=xlsreader('/dev/stdin',opt.worksheet)

elif opt.infmt=='shell':
  def shellreader(f):
    for line in f:
      if writing_dialog.quoting==csv.QUOTE_NONNUMERIC:
        row=[numeric(val) for val in shlex.split(line)]
      else:
        row=shlex.split(line)
      yield row

  reader=shellreader(sys.stdin)

else:
  die("Programming error! Unknown input format: %r"%(opt.infmt,))

# Set up a CSV writer.
writer=csv.writer(sys.stdout,dialect=opt.writing)

# This is where unit testing is implemented.
if opt.test:
  import doctest,StringIO
  failed,total=doctest.testmod()
  if failed:
    sys.exit(1)

# Output the CSV for our command line arguments, if any.
if args:
  writer.writerow(args)

# Read standard input, if any.
if not sys.stdin.isatty():
  if opt.infmt=='shell':
    # Parse each line for values as a shell would, and then write each line's
    # values as a line of CSV-formatted values.
    for line in sys.stdin:
      if writing_dialog.quoting==csv.QUOTE_NONNUMERIC:
        row=[numeric(val) for val in shlex.split(line)]
      else:
        row=shlex.split(line)
      writer.writerow(row)
  else:
    # We're just converting from one dialect of CSV to another, maybe.
    for row in reader:
      writer.writerow(row)
