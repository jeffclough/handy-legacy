#!/usr/bin/env python

class BaseError(Exception):
  def __init__(self,msg):
    super(self.__class__,self).__init__(msg)

class Base(object):
  alphabet=None

  def read_chunks(f,size):
    "This fake iterator returns size characters at a time from file f."

    buf=f.read(size)
    while buf!='':
      yield buf
      buf=f.read(size)

  def read_bit_groups(f,bit_size,count):
    """This fake iterator yields tuples of up to count bit_size-bit
    values from file f. bit_size*count MUST be a multiple of 8."""

    assert (bit_size*count)%8==0
    buf_size=(bit_size*count)/8
    buf=f.read(buf_size)
    while buf!='':
      # Read this buffer into a buf_size-byte, unsigned, big endian integer.
      i=0;
      for j in range(len(buf)):
        i=(i<<8)|ord(buf[j])
      # Handle a short buffer by shifting left for the missing data.
      if i<buf_size-1:
        i<<=8*(buf_size-1-i)
      # Now shift out bit_size bits at a time.
      values=[]
      for j in range(count):
        values.insert(0,i&((2**bitsize)-1))
        i>>=bit_size
      #yield tuple(values[:
      buf=f.read(size)


  def enocde(fin,fout):
    pass

  def decode(fin,fout):
    pass

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

class Base64(Base)
  alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/+'

  def encode(inf,outf):
    "Convert the data in inf to base64 and write it to outf."

    for buf in read_chunks(inf,3):
      # Interpret these bytes as a big endian, unsigned integer.
      byte_count=len(buf)
      v=0
      for i in range(byte_count):
        v|=ord(buf[i])<<(2-i)
      # Break this 24-bit integer down into 4 6-bit values.
      values=[(v>>(i*6))&(2**6-1) for i in range(3,-1,-1)]
      if byte_count<3:
        values=values[:byte_count+1)

      # Now output these values using the base-64 alphabet.
      for v in values:
        outf.write(alphabet[v])
      if len(values)<4:
        outf.write('='*(4-len(values)))


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

class Base85
  alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~'


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

import optparse,os,re,sys

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Set up our alphabets. Base 16 is a special case not represented as an
# explicit alphabet.
#
alphabet=dict([(len(s),s) for s in (
  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
  'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/+',
  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~'
)])
possible_bases=tuple(sorted([16]+alphabet.keys()))

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Wrangle the command line, including setting default options according to the
# name of the command this code was run as. If the command doesn't indicate
# what the default base should be, require that the -b (--base) option be
# given. 
#

cmd=os.path.basename(sys.argv[0])
cmd_parser=re.compile(r'^(base|decode|encode)(%s)?$'%('|'.join([str(b) for b in possible_bases])))
m=cmd_parser.match(cmd)
if not m:
  sys.stderr.write('Improper command name (%s) not recognized by "base" command.'%(cmd,))
  sys.exit(1)
print m.groups()

default_action=('encode','decode')[m.groups()[0]=='decode']
default_base=m.groups()[1]
if not default_base:
  default_base=0

op=optparse.OptionParser(
  add_help_option=False,
  usage='%s [OPTION ...] [INPUT_FILE]'%cmd,
  description="""With no FILE, or when FILE is -, read standard input.

The data are encoded as described for the base64 alphabet in RFC 3548. When decoding, the input may contain newlines in addition to the bytes of the formal base64 alphabet. Use --ignore-garbage to attempt to recover from any other non-alphabet bytes in the encoded stream."""
)

op.add_option(
  '-d','--decode',dest='action',action='store_const',const='decode',default=default_action,
  help="Decode previously encoded ASCII input to (possibly) binary output. (%s by default.)"%(('Off','On')[default_action=='decode'])
)
op.add_option(
  '-e','--encode',dest='action',action='store_const',const='encode',
  help="Encode (possibly) binary input data to ASCII output. (%s by default.)"%(('Off','On')[default_action=='encode'])
)
op.add_option(
  '-i','--ignore-garbage',dest='ignore_garbage',action='store_true',default=False,
  help="When decoding, ignore non-alphabet characters. (default: %default)"
)
op.add_option(
  '-w','--wrap',dest='wrap',metavar='COLS',action='store',type='int',default=76,
  help="Wrap encoded lines after COLS character (default 76). Use 0 to disable line wrapping. (default: %default)"
)
#op.add_option(
#  '-i','--input',dest='input',action='store',default=None,
#  help="Read input from this file. Default is stdin; passing - also represents stdin."
#)
op.add_option(
  '-o','--output',dest='output',metavar='FILENAME',action='store',default=None,
  help="Write output to this file.  Default is stdout; passing - also represents stdout. (default: stdout)"
)
op.add_option(
  '-b','--base',dest='base',action='store',type='int',default=default_base,
  help="Specify what base %r to encode or decode with. If the name used to invoke this command (e.g. base64) doesn't give a base, this option MUST be used to specify one. (default: %%default)"%(possible_bases,)
)
op.add_option(
  '-h','--help',dest='help',action='store_true',default=False,
  help="Show this help message, and exit."
)
opt,args=op.parse_args()

if args:
  if len(args)>1:
    sys.stderr.write("Too many input files given to %s: %s"%(cmd,' '.join([repr(s) for s in args])))
    sys.exit(1)
  opt.input=args[0]
else:
  opt.input='-'

if opt.output==None:
  opt.output='-'

if opt.help:
  op.print_help()
  sys.exit(0)

print 'DEBUG: opt.action=%r'%(opt.action,)
print 'DEBUG: opt.ignore_garbage=%r'%(opt.ignore_garbage,)
print 'DEBUG: opt.wrap=%r'%(opt.wrap,)
print 'DEBUG: opt.output=%r'%(opt.output,)
print 'DEBUG: opt.base=%r'%(opt.base,)

if opt.base==0:
  sys.stderr.write('%s was called with no -b (--base) option.'%cmd)
  sys.exit(1)

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Open input and output files in modes conducive to whatever operation we're
# performing. If writing to standard output, be sure to append.
#

fin=fout=None
if opt.output=='-':
  fout_mode='a' # append if we're writing to standard output.
else:
  fout_mode='w'
if opt.action=='encode':
  fin_mode='rb'
else:
  fin_mode='r'
  fout_mode+='b'
if opt.input=='-':
  fin=os.fdopen(sys.stdin.fileno(),fin_mode)
else:
  fin=open(opt.input,fin_mode)
if opt.output=='-':
  fout=os.fdopen(sys.stdout.fileno(),fin_mode)
else:
  fout=open(opt.output,fout_mode)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# TODO: Now do what we came here to do.

def decode(inf,outf,alphabet):
  pass

def encode(inf,outf,alphabet):
  pass

if opt.action=='encode':
  pass
else: # decode
  pass
