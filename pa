#!/usr/bin/env python
'''
This program spells words in a phonetic alphabet. For instance, in the
NATO dialect, 'a' becomes 'Alpha', b becomes 'Bravo', and so on. The
phonetic spelling of each word is written to one line of standard
output.

Run this program the --help command line option to see command line
options. Supported dialects: NATO (the default), RAF, Police, US,
and Western Union.

'''

import optparse,os,sys
import phonetics

prog=os.path.basename(sys.argv[0])
op=optparse.OptionParser(
  usage='''Usage: %prog [options] any text you'd like

This program spells words in a phonetic alphabet. For instance, in the
NATO dialect, 'a' becomes 'Alpha', b becomes 'Bravo', and so on. The
phonetic spelling of each word is written to one line of standard
output. Supported dialects: NATO (the default), RAF, Police, US, and
Western Union.''' 
)
op.add_option('-d','--dialect',choices=phonetics.dialect.keys(),default='nato',help='Specify one of: %s'%phonetics.dialects)
op.add_option('-i','--ignore-case',action='store_true',default=False,help='Ignore the case of the input. By default, F ==> FOXTROT while f ==> Foxtrot, for example.')
opt,args=op.parse_args()
if opt.dialect not in phonetics.dialects:
  print >>sys.stderr,'%s: Unknown dialect %s'%(prog,opt.dialect)
  sys.exit(1)

if args:
  print phonetics.wordify(
    ' '.join(args),
    dialect=opt.dialect,
    ignore_case=opt.ignore_case
  )
else:
  # We'll read standard input, if any, rather than use command line arguments.
  if os.isatty(sys.stdin.fileno()):
    op.print_help() # Show usage message.
    sys.exit(0)
  else:
    for line in sys.stdin:
      print phonetics.wordify(line)
    args=sys.stdin   # Read "arguments" from standard input.
