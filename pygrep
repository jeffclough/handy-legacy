#!/usr/bin/env python3

import datetime,fnmatch,optparse,os,re,sys
from handy import shellify,file_walker

# Use this expression to recognize and parse log file data.
log_parser=re.compile(r'(?P<month>\w+)\s+(?P<day>\d+)\s+(?P<time>\d+:\d+:\d+)\s+(?P<host>.*?)\s+(?P<proc>.*?)\[(?P<pid>\d+)\]:\s+(?P<msg>.*)')

if sys.version_info<(2,4):
  # We'll need to supply our own reversed() function.

  def reversed(seq):
    """Return a reversed copy of the given sequence as a list. This
    isn't an exact replacement for version 2.4's reversed() built-in
    function, but it's just fine for the needs of this script."""

    l=list(seq)
    l.reverse()
    return l

progname=os.path.basename(sys.argv[0])

format_fieldspec=re.compile(r'{([0-9A-Za-z_]*)}')
def format(fmt,*args,**kwargs):
  #print '---- args=%r, kwargs=%r'%(args,kwargs)
  # Get a list of fields in the format string: (start,end,id) tuples
  fields=[]
  i=0 # Empty fieldspecs ({}) will begin with field number 1.
  for m in format_fieldspec.finditer(fmt):
    id=m.group(1)
    if len(id)==0:
      i+=1
      id=i
    elif id.isdigit():
      i=id=int(id)
    else:
      i=len(fields)+1
    fields.append((m.start(),m.end(),id))
  for start,end,ndx in reversed(fields):
    if isinstance(ndx,int):
      if ndx>=0 and ndx<=len(args):
        fmt=fmt[:start]+args[ndx]+fmt[end:]
      else:
        fmt=fmt[:start]+fmt[end:]
    else:
      fmt=fmt[:start]+kwargs.get(ndx,'')+fmt[end:]
  return fmt

class FakeMatchObject(object):
  """Combine multiple _sre.SRE_Match objects into a single object that
  behaves ALMOST the same way."""

  _shebang=None # the whole matching string of the FIRST object given.
  _groups=[] # string values of all groups
  _groupdict={} # dictionary of named groups

  def __init__(self,*args):
    for m in args:
      if m==None:
        continue
      if self._shebang==None:
        # Remember the whole matching string only for the first object we're given.
        self._shebang=m.group()
      self._groups.extend(m.groups())
      self._groupdict.update(m.groupdict())

  def group(self,*args):
    "Just like the standard re.MatchObject.group() method."

    # In the absence of arguments, assume a single argument with value 0.
    if not args:
      args=(0,)

    # If the first argument is 0 return the whole matching string.
    if args[0]==0:
      return self._shebang

    # If there is only one group given, return it as a string.
    if len(args)==1:
      return self._groups[args[0]-1]

    # Return a tuple of strings corresponding to the requested groups.
    g=[]
    for ndx in args:
      if isinstance(ndx,str):
        g+=_groupdict[ndx]
      else:
        g+=self._groups[ndx-1]
    return tuple(g)

  def groups(self,default=None):
    "Just like the standard re.MatchObject.groups() method."

    return tuple([
      [v,default][v==None] for v in self._groups
    ])

  def groupdict(self,default=None):
    "Just like the standard re.MatchObject.groupdict() method."

    return {
      k:(default if v is None else v) for k,v in self._groupdict.items()
    }

    # The following methods and attributes are not implemented because
    # I don't need them in this code. And not all of them would have any
    # meaning (or be uncomputable) for a FakeMatchObject object anyway.
    #   def expand(template)
    #   def start(group=0)
    #   def stop(group=0)
    #   def span(group=0)
    #   pos
    #   endpos
    #   lastindex
    #   lastgroup
    #   re
    #   string

def grepfile(filename,r,also=None):
  '''Search the given file (or stdin if filename is '-') for lines that
  match the given regular expression. Return the number of matching
  lines. The optional also(regexp,string) funciton, if given, MUST
  return the re.MatchObject resulting from regexp.search(string), or
  None if the match fails. Results of this match will be added to those
  of the initial match.'''

  # Open our input file as inf.
  if filename=='-':
    filename='(standard input)'
    inf=sys.stdin
  else:
    try:
      inf=open(filename)
    except Exception as e:
      print('%s: Error opening file %s: %s'%(progname,filename,e), file=sys.stderr)
      return 0

  # Scan inf for matchine lines and handle them according to our global
  # options.
  matches=0
  linecount=0
  try:
    for line in inf:
      linecount+=1
      if line and line[-1]=='\n':
        line=line[:-1]
      if opt.match:
        m=r.match(line)
      else:
        m=r.search(line)
      if (m!=None and also!=None) or (m!=None)!=opt.invert:
        # If we've been given a subsequent match to test, do that now.
        if also!=None:
          #print 'D: r.pattern=%r'%(r.pattern,)
          #print 'D: m.groupdict()["msg"]=%r'%(m.groupdict()["msg"],)
          mm=eval(also)
          #mm=r.search(m.groupdict()['msg'])
          #print 'D: mm=%r'%(mm,)
          if (mm!=None)==opt.invert:
            continue
          # Merge mm into m, and proceed as usual from there.
          m=FakeMatchObject(m,mm)
          if r==log_parser:
            # This tight coupling is brought to you by expeditious pragmatism.
            monthname=m._groupdict['month']
            m._groupdict['month']='%02d'%datetime.datetime.strptime(monthname,'%b').month
            m._groupdict['monthname']=monthname

        # So this is a match! Yea!
        matches+=1
        if opt.list:
          if opt.number:
            continue
          break

        # Get our groups ready for their massage, in case they're scheduled for one.
        if m:
          groups=m.groups()
          groupdict=m.groupdict()
        else:
          groups=()
          groupdict={}

        if opt.strip:
          # Remove leading and trailing white space from the values of all groups.
          l=[]
          for val in groups:
            if val!=None:
              val=val.strip()
            l.append(val)
          groups=tuple(l)
          # Remove leading and trailing white space from the values of named groups.
          l=[]
          for key in groupdict:
            val=groupdict[key]
            if val!=None:
              val=val.strip()
            l.append((key,val))
          groupdict=dict(l)

        # Handle any of our special (or general) formatting options.
        if opt.groups=='shell':
          line='; '.join([
            '%s=%s'%(x.replace(' ','_'),shellify(groupdict[x]))
              for x in sorted(groupdict.keys())
          ])
        elif opt.dictionary:
          keys=list(groupdict.keys())
          keys.sort()
          line='{'+', '.join(['%r: %r'%(k,groupdict[k]) for k in keys])+'}'
        elif opt.format:
          try:
            line=format(opt.format,*((m.group(),)+groups),**groupdict)
          except AttributeError as e:
            print('opt.format=%r (type=%s)'%(opt.format,type(opt.format)))
            msg=str(e)
            sys.stdout.flush()
            sys.stderr.write('%s: %s(%d): %s\n'%(progname,filename,linecount,msg))
            raise
            sys.exit(2)
          except IndexError as e:
            msg=str(e)
            sys.stdout.flush()
            sys.stderr.write('%s: %s(%d): %s\n'%(progname,filename,linecount,msg))
            sys.exit(2)
          except ValueError as e:
            msg=str(e)
            sys.stdout.flush()
            sys.stderr.write('%s: %s(%d): %s\n'%(progname,filename,linecount,msg))
            sys.exit(2)

        # Handle prefixing of filename and/or line number.
        prefix=''
        if opt.onefile:
          if opt.number:
            prefix='%d:'%linecount
        elif opt.number:
          prefix='%s:%d:'%(filename,linecount)
        else:
          prefix='%s:'%filename

        # These are the regular formats for when we're not numbering lines.
        print(prefix+line)
        if m and opt.groups:
          if opt.groups=='tuple' and groups:
            print('('+')('.join(['%s'%repr(x) for x in groups])+')')
          if opt.groups=='dict' and groupdict:
            d=groupdict
            print(' '.join(['%s=%s'%(x,repr(d[x])) for x in sorted(d.keys())]))
          if opt.groups!='shell':
            print('')
  except UnicodeDecodeError as e:
    print("Binary file: %s"%filename,file=sys.stderr)
  if opt.list and matches>0:
    if opt.number:
      print('%s:%d'%(filename,matches))
    else:
      print(filename)
  return matches

# Handle our command line.
import OptionParserFormatters
usage="%prog [options] [filename] ..."
description="""While this command may be generally useful, its primary purpose is as a tool for experimenting with Python's regular expression syntax. Briefly, it searches the named input files (or standard input if no files are named, or the file name - is given) for lines containing a match to the given pattern. By default, the matching lines are printed. """
epilog="""
 Exit
Status  Comments
   0    No errors. At least one match was found.
   1    No errors. No match was found.
   2    An error was detected in the regular expression syntax or in the
        command line options.
   3    There was a problem opening or reading a file.

Note that the -v option reverses the meanings of status codes 0 and 1."""

if sys.version_info<(2,5):
  op=optparse.OptionParser(
    formatter=OptionParserFormatters.IndentedHelpFormatterWithNL(2,8),
    usage=usage,
    description=description+'\n'+epilog
  )
else:
  op=optparse.OptionParser(
    formatter=OptionParserFormatters.IndentedHelpFormatterWithNL(2,8),
    usage=usage,
    description=description,
    epilog=epilog
  )
op.add_option('-f','--format',dest='format',action='store',default=None,help="""Format matching lines (or non-matching lines if -v is also used) according to the given FORMAT. FORMAT is a Python formatting string as described in section 7.1.3 of the Python Standard Library documentation. Briefly, all brace expressions ({}) are replaced by either positional or named groups within the matched regular expression. You can leave the braces empty to let the formatter do the counting for you (e.g. '{} then {}' is the same as '{0} then {1}'). If the matched RE uses named groups (e.g. '(?P<age>\d+) (?P<lname>[^,]+),(?P<fname>.*)'), then the FORMAT string can refer to what those groups match (e.g. '{fname} {lname} is {age} years of age.').""")

op.add_option('-1',dest='onefile',action='store_true',default=False,help="Matching lines are normally prefixed with the filename followed by a colon when more than one filename is given on the command line. When only one filename is given, this prefix is omitted. This option tells %prog to behave as if only one file were given regardless of how many were actually given. (default: %default)")

op.add_option('--dictionary',dest='dictionary',action='store_true',default=False,help="Output a python dictionary of named groups in the RE. (This is mostly for debugging, but use it for your own purposes if you'd like.)")

op.add_option('--flag',dest='flags',action='store',default=None,help="""Use as many of the following as you'd like to set the Python regular expression options:
  i - Ignore case. (Same as -i option.)
  l - Make \w, \W, \\b, \B, \s, and \S dependent on current locale.
  m - Operate in multiline mode. ^ and $ recognize embedded newlines.
  s - Make the . special character recognize newlines as well as other white space.
  u - Make \w, \W, \\b, \B, \s, and \S respect the Unicode properties database.
  x - This flag allows you to write regular expressions that look nicer.  Whitespace within the pattern is ignored, except when in a character class or preceded by an unescaped backslash, and, when a line contains a "#" neither in a character class or preceded by an unescaped backslash, all characters from the leftmost such "#" through the end of the line are ignored.
Combine these flags as you'd like, e.g. --flags=ims.""")
op.add_option('--flags',dest='flags',action='store',default=None,help="Same as --flag.")

op.add_option('-g',dest='groups',action='store_const',const='tuple',default=None,help="Show the tuple of matching groups for each matching line.")
op.add_option('-G',dest='groups',action='store_const',const='dict',default=None,help="Useful only if named groups (e.g. '(?P<user>\w+)\s+(?P<dbname>\w+)') are used. Show the dictionary of matching named groups for each matching line.")
op.add_option('--shell',dest='groups',action='store_const',const='shell',default=None,help="Like -G, but this option outputs shell-executable code to assign matched values to the given names (e.g. 'user=rsmith337; dbname=employees'). All required escape characters are applied to make this safe and reliable to use with the shell's eval command.")

op.add_option('-i',dest='ignore_case',action='store_true',default=False,help="Ingore case. (Same as --flag=i.)")

op.add_option('--log-parser',dest='log_parser',action='store_true',default=False,help='''Assume that the input file is a "typical" *nix log file. Parse the month, day, time, host name, process name, process ID and message from each line. For each matching line of input, apply the RE from the command line to the message portion of the log line. This is VERY useful with -f, -g, -G, and -shell. (And try out the --dictionary option to the fields --log-parser is finding.)''')

op.add_option('-l',dest='list',action='store_true',default=False,help="Suppress normal output; instead print the name of each input file from which any output would normally have been printed. The scanning will stop on the first match. If -n is used with -l, the number of matches in each file is given after the filename, with a colon separating them.")

op.add_option('-m',dest='match',action='store_true',default=False,help="Use the match() function rather than the search() re class method. To over-simplify, match() only finds matches at the beginning of a line, while search() will scan the whole line for a match anywhere within it.")

op.add_option('-n',dest='number',action='store_true',default=False,help="Prefix each line of output with the line number within its input file. See -l for how it modifies -n's behavior.")

op.add_option('--strip',dest='strip',action='store_true',default=False,help="Remove any whitespace characters from the beginning and ending of each matched group's value.")

op.add_option('--recurse','-r',dest='recurse',action='store_true',default=False,help="Recurse any directories found on the command line.")
op.add_option('--depth',dest='depth',metavar='N',action='store',type=int,default=10**6,help="Restrict the recursive depth to N.")
op.add_option('--prune',dest='prune',metavar='DIR',action='append',default=[],help="Do not recurse into any directory matching DIR. More than one --prune option may be given.")
op.add_option('-v',dest='invert',action='store_true',default=False,help="Invert the sense of matching so that non-matching lines are selected.")

opt,args=op.parse_args()
flags=0
if opt.flags:
  for f in opt.flags:
    if f=='i':
      flags|=re.IGNORECASE
    elif f=='l':
      flags|=re.LOCALE
    elif f=='m':
      flags|=re.MULTILINE
    elif f=='s':
      flags|=re.DOTALL
    elif f=='u':
      flags|=re.UNICODE
    elif f=='x':
      flags|=re.VERBOSE
    else:
      print('%s: Invalid flag character: "%s"'%(progname,f), file=sys.stderr)
      sys.exit(2)
if opt.ignore_case:
  flags|=re.IGNORECASE
opt.flags=flags

matches=0
try:
  # Compile our regular expression.
  if not args:
    print('%s: Missing regular expression'%progname, file=sys.stderr)
    sys.exit(2)
  try:
    r=re.compile(args[0],opt.flags)
  except Exception as e:
    print('%s: %s'%(progname,e), file=sys.stderr)
    sys.exit(2)
  del args[0]

  # Scan the given files (or stdin) for our regular expression.
  if not args:
    args=['-']
  if len(args)==1:
    opt.onefile=True
  for filename in args:
    if opt.log_parser:
      # Tell grepfile() to try a subsequent match on each initially matching line.
      also_re=r
      matches+=grepfile(filename,log_parser,"also_re.search(m.groupdict()['msg'])")
    else:
      matches+=grepfile(filename,r)

except IOError as e:
  if 'broken pipe' not in str(e).lower():
    raise

# Terminate with an exit status of 0 if found a match. Otherwise, terminate
# with an exit status of 1.
sys.exit(int(matches<1))
