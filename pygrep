#!/usr/bin/env python

from getopt import *
from os.path import *
from string import *
from sys import *
import re

prog=basename(argv[0])

def usage(rc):
  if rc==0:
    outf=stdout
  else:
    outf=stderr
  print >>outf,r'''
NAME
  %s - Print lines matching a Python regular expression.
  
SYNOPSIS
  %s [--flags={ilmsux}] [-ilnv] pattern [file ...]

DESCRIPTION
  While this command may be generally useful, its primary purpose is as a
  tool for experimenting with Python's regular expression syntax. Briefly,
  it searches the named input files (or standard input if no files are
  named, or the file name - is given) for lines containing a match to the
  given pattern.  By default, the matching lines are printed.

OPTIONS
  -f FORMAT
      Format matching (or non-matching lines if -v is also used) according
      to the given FORMAT. FORMAT is a Python formatting string as described
      in 7.1.3 of the Python Standard Library documentation. Briefly, all
      brace expressions ({}) are replaced by either positional or named
      groups within the matched regular expression. You can leave the braces
      empty to let the formatter do the counting for you (e.g. '{} then {}'
      is the same as '{0} then {1}'). If the matched RE uses named groups
      (e.g. '(?P<age>\d+) (?P<lname>[%,]+),(?P<fname>.*)'), then the FORMAT
      string can refer what those groups match my name (e.g. '{fname}
      {lname} is {age} years of age.').
  --flags
    Use as many of the following as you'd like to set the Python regular
    expression options:
      i - Ignore case. (Same as -i option.)
      l	- Make \w, \W, \b, \B, \s, and \S dependent on current locale.
      m - Operate in multiline mode. ^ and $ recognize embedded newlines.
      s - Make the . special character recognize newlines as well as other
	  white space.
      u - Make \w, \W, \b, \B, \s, and \S respect the Unicode
	  properties database.
      x - This flag allows you to write regular expressions that look nicer.
	  Whitespace within the pattern is ignored, except when in a
	  character class or preceded by an unescaped backslash, and, when a
	  line contains a "#" neither in a character class or preceded by an
	  unescaped backslash, all characters from the leftmost such "#"
	  through the end of the line are ignored.
    Combine these flags as you'd like, e.g. --flags=ims.

  -g  Show the tuple of matching groups for each matching line.

  -G  Show the dictionary of matching named groups for each matching line.

  -i  Ingore case. (Same as --flags=i.)

  -l  Suppress normal output; instead print the name of each input file
      from which no output would normally have been printed. The scanning
      will stop on the first match. If -n is used with -l, the number of
      matches in each file is given after the filename, with a colon
      separating them.

  -m  Use the match() function rather than the search() re class method.
      To over-simplify, match() only finds matches at the beginning of a
      line, while search() will scan the whole line for at match anywhere
      within it.

  -n  Prefix each line of output with the line number within its input file.
      See -l for how it modifies -n's behavior.

  -v  Invert the sense of matching so that non-matching lines are selected.

REGULAR EXPRESSION SYNTAX

  "."
  (Dot.) In the default mode, this matches any character except a newline.
  If the DOTALL flag has been specified, this matches any character
  including a newline.

  "^"
  (Caret.) Matches the start of the string, and in MULTILINE mode also
  matches immediately after each newline.

  "$"
  Matches the end of the string or just before the newline at the end of the
  string, and in MULTILINE mode also matches before a newline. foo matches
  both 'foo' and 'foobar', while the regular expression foo$ matches only
  'foo'. More interestingly, searching for foo.$ in 'foo1\nfoo2\n' matches
  'foo2' normally, but 'foo1' in MULTILINE mode.

  "*"
  Causes the resulting RE to match 0 or more repetitions of the preceding
  RE, as many repetitions as are possible. ab* will match 'a', 'ab', or 'a'
  followed by any number of 'b's.

  "+"
  Causes the resulting RE to match 1 or more repetitions of the preceding
  RE. ab+ will match 'a' followed by any non-zero number of 'b's; it will
  not match just 'a'.

  "?"
  Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.
  ab? will match either 'a' or 'ab'.

  *?, +?, ??
  The "*", "+", and "?" qualifiers are all greedy; they match as much text
  as possible. Sometimes this behaviour isn't desired; if the RE <.*> is
  matched against '<H1>title</H1>', it will match the entire string, and not
  just '<H1>'. Adding "?" after the qualifier makes it perform the match in
  non-greedy or minimal fashion; as few characters as possible will be
  matched. Using .*? in the previous expression will match only '<H1>'.

  {m}
  Specifies that exactly m copies of the previous RE should be matched;
  fewer matches cause the entire RE not to match. For example, a{6} will
  match exactly six "a" characters, but not five.

  {m,n}
  Causes the resulting RE to match from m to n repetitions of the preceding
  RE, attempting to match as many repetitions as possible. For example,
  a{3,5} will match from 3 to 5 "a" characters. Omitting m specifies a lower
  bound of zero, and omitting n specifies an infinite upper bound. As an
  example, a{4,}b will match aaaab or a thousand "a" characters followed by
  a b, but not aaab. The comma may not be omitted or the modifier would be
  confused with the previously described form.

  {m,n}?
  Causes the resulting RE to match from m to n repetitions of the preceding
  RE, attempting to match as few repetitions as possible. This is the
  non-greedy version of the previous qualifier. For example, on the
  6-character string 'aaaaaa', a{3,5} will match 5 "a" characters, while
  a{3,5}? will only match 3 characters.

  "\"
  Either escapes special characters (permitting you to match characters like
  "*", "?", and so forth), or signals a special sequence; special sequences
  are discussed below.

  []
  Used to indicate a set of characters. Characters can be listed
  individually, or a range of characters can be indicated by giving two
  characters and separating them by a "-". Special characters are not active
  inside sets. For example, [akm$] will match any of the characters "a",
  "k", "m", or "$"; [a-z] will match any lowercase letter, and [a-zA-Z0-9]
  matches any letter or digit. Character classes such as \w or \S (defined
  below) are also acceptable inside a range. If you want to include a "]" or
  a "-" inside a set, precede it with a backslash, or place it as the first
  character. The pattern []] will match ']', for example.

  You can match the characters not within a range by complementing the set.
  This is indicated by including a "^" as the first character of the set;
  "^" elsewhere will simply match the "^" character. For example, [^5] will
  match any character except "5", and [^^] will match any character except
  "^".

  "|"
  A|B, where A and B can be arbitrary REs, creates a regular expression that
  will match either A or B. An arbitrary number of REs can be separated by
  the "|" in this way. This can be used inside groups (see below) as well.
  As the target string is scanned, REs separated by "|" are tried from left
  to right. When one pattern completely matches, that branch is accepted.
  This means that once A matches, B will not be tested further, even if it
  would produce a longer overall match. In other words, the "|" operator is
  never greedy. To match a literal "|", use \|, or enclose it inside a
  character class, as in [|].

  (...)
  Matches whatever regular expression is inside the parentheses, and
  indicates the start and end of a group; the contents of a group can be
  retrieved after a match has been performed, and can be matched later in
  the string with the \number special sequence, described below. To match
  the literals "(" or ")", use \( or \), or enclose them inside a character
  class: [(] [)].

  (?...)
  This is an extension notation (a "?" following a "(" is not meaningful
  otherwise). The first character after the "?" determines what the meaning
  and further syntax of the construct is. Extensions usually do not create a
  new group; (?P<name>...) is the only exception to this rule. Following are
  the currently supported extensions.

  (?iLmsux)
  (One or more letters from the set "i", "L", "m", "s", "u", "x".) The group
  matches the empty string; the letters set the corresponding flags (re.I,
  re.L, re.M, re.S, re.U, re.X) for the entire regular expression.  This is
  useful if you wish to include the flags as part of the regular expression,
  instead of passing a flag argument to the compile() function.

  Note that the (?x) flag changes how the expression is parsed. It should be
  used first in the expression string, or after one or more whitespace
  characters. If there are non-whitespace characters before the flag, the
  results are undefined.

  (?:...)
  A non-grouping version of regular parentheses. Matches whatever regular
  expression is inside the parentheses, but the substring matched by the
  group cannot be retrieved after performing a match or referenced later in
  the pattern.

  (?P<name>...)
  Similar to regular parentheses, but the substring matched by the group is
  accessible via the symbolic group name name. Group names must be valid
  Python identifiers, and each group name must be defined only once within a
  regular expression. A symbolic group is also a numbered group, just as if
  the group were not named. So the group named 'id' in the example above can
  also be referenced as the numbered group 1.

  For example, if the pattern is (?P<id>[a-zA-Z_]\w*), the group can be
  referenced by its name in arguments to methods of match objects, such as
  m.group('id') or m.end('id'), and also by name in pattern text (for
  example, (?P=id)) and replacement text (such as \g<id>).

  (?P=name)
  Matches whatever text was matched by the earlier group named name.

  (?#...)
  A comment; the contents of the parentheses are simply ignored.

  (?=...)
  Matches if ... matches next, but doesn't consume any of the string.  This
  is called a lookahead assertion. For example, Isaac (?=Asimov) will match
  'Isaac ' only if it's followed by 'Asimov'.

  (?!...)
  Matches if ... doesn't match next. This is a negative lookahead assertion.
  For example, Isaac (?!Asimov) will match 'Isaac ' only if it's not
  followed by 'Asimov'.

  (?<=...)
  Matches if the current position in the string is preceded by a match for
  ... that ends at the current position. This is called a positive
  lookbehind assertion. (?<=abc)def will find a match in "abcdef", since the
  lookbehind will back up 3 characters and check if the contained pattern
  matches. The contained pattern must only match strings of some fixed
  length, meaning that abc or a|b are allowed, but a* and a{3,4} are not.
  Note that patterns which start with positive lookbehind assertions will
  never match at the beginning of the string being searched; you will most
  likely want to use the search() function rather than the match() function:

      >>> import re
      >>> m = re.search('(?<=abc)def', 'abcdef')
      >>> m.group(0)
      'def'

      This example looks for a word following a hyphen:

      >>> m = re.search('(?<=-)\w+', 'spam-egg')
      >>> m.group(0)
      'egg'

  (?<!...)
  Matches if the current position in the string is not preceded by a match
  for ... This is called a negative lookbehind assertion. Similar to
  positive lookbehind assertions, the contained pattern must only match
  strings of some fixed length. Patterns which start with negative
  lookbehind assertions may match at the beginning of the string being
  searched.

  (?(id/name)yes-pattern|no-pattern)
  Will try to match with yes-pattern if the group with given id or name
  exists, and with no-pattern if it doesn't. |no-pattern is optional and can
  be omitted. For example, (<)?(\w+@\w+(?:\.\w+)+)(?(1)>) is a poor email
  matching pattern, which will match with '<user@host.com>' as well as
  'user@host.com', but not with '<user@host.com'. New in version 2.4.

  The special sequences consist of "\" and a character from the list below.
  If the ordinary character is not on the list, then the resulting RE will
  match the second character. For example, \$ matches the character "$".

  \number
  Matches the contents of the group of the same number. Groups are numbered
  starting from 1. For example, (.+) \1 matches 'the the' or '55 55', but
  not 'the end' (note the space after the group). This special sequence can
  only be used to match one of the first 99 groups. If the first digit of
  number is 0, or number is 3 octal digits long, it will not be interpreted
  as a group match, but as the character with octal value number. Inside the
  "[" and "]" of a character class, all numeric escapes are treated as
  characters.

  \A
  Matches only at the start of the string.

  \b
  Matches the empty string, but only at the beginning or end of a word.  A
  word is defined as a sequence of alphanumeric or underscore characters, so
  the end of a word is indicated by whitespace or a non-alphanumeric,
  non-underscore character. Note that \b is defined as the boundary between
  \w and \ W, so the precise set of characters deemed to be alphanumeric
  depends on the values of the UNICODE and LOCALE flags. Inside a character
  range, \b represents the backspace character, for compatibility with
  Python's string literals.

  \B
  Matches the empty string, but only when it is not at the beginning or end
  of a word. This is just the opposite of \ b, so is also subject to the
  settings of LOCALE and UNICODE.

  \d
  When the UNICODE flag is not specified, matches any decimal digit; this is
  equivalent to the set [0-9]. With UNICODE, it will match whatever is
  classified as a digit in the Unicode character properties database.

  \D
  When the UNICODE flag is not specified, matches any non-digit character;
  this is equivalent to the set [^0-9]. With UNICODE, it will match anything
  other than character marked as digits in the Unicode character properties
  database.

  \s
  When the LOCALE and UNICODE flags are not specified, matches any
  whitespace character; this is equivalent to the set [ \t\n\r\f\v]. With
  LOCALE, it will match this set plus whatever characters are defined as
  space for the current locale. If UNICODE is set, this will match the
  characters [ \t\n\r\f\v] plus whatever is classified as space in the
  Unicode character properties database.

  \S
  When the LOCALE and UNICODE flags are not specified, matches any
  non-whitespace character; this is equivalent to the set [^ \t\n\r\f\v]
  With LOCALE, it will match any character not in this set, and not defined
  as space in the current locale. If UNICODE is set, this will match
  anything other than [ \t\n\r\f\v] and characters marked as space in the
  Unicode character properties database.

  \w
  When the LOCALE and UNICODE flags are not specified, matches any
  alphanumeric character and the underscore; this is equivalent to the set
  [a-zA-Z0-9_]. With LOCALE, it will match the set [0-9_] plus whatever
  characters are defined as alphanumeric for the current locale. If UNICODE
  is set, this will match the characters [0-9_] plus whatever is classified
  as alphanumeric in the Unicode character properties database.

  \W
  When the LOCALE and UNICODE flags are not specified, matches any
  non-alphanumeric character; this is equivalent to the set [^a-zA-Z0-9_].
  With LOCALE, it will match any character not in the set [0-9_], and not
  defined as alphanumeric for the current locale. If UNICODE is set, this
  will match anything other than [0-9_] and characters marked as
  alphanumeric in the Unicode character properties database.

  \Z
  Matches only at the end of the string.

DIAGNOSTICS
   Exit
  Status  Comments
     0	  No errors. At least one match was found.
     1	  No errors. No match was found.
     2	  An error was detected in the regular expression syntax or in the
	  command line options.
     3    There was a problem opening or reading a file.

  Note that the -v option reverses the meanings of status codes 0 and 1.

'''%(prog,prog)
  exit(rc)

def grepfile(filename,r):
  '''Search the given file (or stdin if filename is '-') for lines that
  match the given regular expression. Return the number of matching
  lines.'''

  # Open our input file as inf.
  if filename=='-':
    filename='(standard input)'
    inf=stdin
  else:
    try:
      inf=open(filename)
    except Exception,e:
      print >>stderr,'%s: Error opening file %s: %s'%(argv[0],filename,e)
      return 0

  # Scan inf for matchine lines and handle them according to our global
  # options.
  matches=0
  linecount=0
  for line in inf:
    linecount+=1
    if line and line[-1]=='\n':
      line=line[:-1]
    if opt_match:
      m=r.match(line)
    else:
      m=r.search(line)
    if (m!=None) != opt_invert:
      matches+=1
      if opt_list:
	if opt_number:
          continue
        break
      if opt_format:
        try:

          line=opt_format.format(line,*m.groups(),**m.groupdict())
        except AttributeError,e:
          print 'opt_format=%r (type=%s)'%(opt_format,type(opt_format))
          msg=str(e)
          stdout.flush()
          stderr.write('%s: %s(%d): %s\n'%(prog,filename,linecount,msg))
          raise
          exit(2)
        except IndexError,e:
          msg=str(e)
          stdout.flush()
          stderr.write('%s: %s(%d): %s\n'%(prog,filename,linecount,msg))
          exit(2)
      if opt_number:
	if opt_onefile:
	  print '%d:%s'%(linecount,line)
	else:
	  print '%s:%d:%s'%(filename,linecount,line)
        if m:
          if opt_groups and m.groups():
            print '('+')('.join(['%s'%repr(x) for x in m.groups()])+')'
          if opt_groupdict and m.groupdict():
            d=m.groupdict()
            print ' '.join(['%s=%s'%(x,repr(d[x])) for x in d])
          if opt_groups or opt_groupdict:
            print ''
      else:
	if opt_onefile:
	  print line
	else:
	  print '%s:%s'%(filename,line)
        if m:
          if opt_groups and m.groups():
            print '('+')('.join(['%s'%repr(x) for x in m.groups()])+')'
          if opt_groupdict and m.groupdict():
            d=m.groupdict()
            print ' '.join(['%s=%s'%(x,repr(d[x])) for x in d])
          if opt_groups or opt_groupdict:
            print ''
  if opt_list and matches>0:
    if opt_number:
      print '%s:%d'%(filename,matches)
    else:
      print filename
  return matches

# Handle our command line.
opt_format=None     # -f FORMAT
opt_reflags=0	    # --flag=...
opt_list=False	    # -l
opt_number=False    # -n
opt_invert=False    # -v
opt_onefile=False   # True if we're scanning only one file.
opt_groups=False    # True if we're to show matching groups.
opt_groupdict=False # True if we're to show matching group dictionaries.
opt_match=False     # True if we're to use match() rather than search().

if len(argv)<2:
  usage(0)
try:
  opts,args=getopt(argv[1:],'f:Ggilmnv','flags=')
except Exception,e:
  print >>stderr,'%s: %s'%(argv[0],e)
  exit(2)
for opt,arg in opts:
  if opt=='-f':
    opt_format=arg
  elif opt=='--flags':
    for f in arg:
      if f=='i':
	opt_reflags|=re.IGNORECASE
      elif f=='l':
	opt_reflags|=re.LOCALE
      elif f=='m':
	opt_reflags|=re.MULTILINE
      elif f=='s':
	opt_reflags|=re.DOTALL
      elif f=='u':
	opt_reflags|=re.UNICODE
      elif f=='x':
	opt_reflags|=re.VERBOSE
      else:
	print >>stderr,'%s: Invalid flag character: "%s"'%(argv[0],f)
	exit(2)
  elif opt=='-G':
    opt_groupdict=True
  elif opt=='-g':
    opt_groups=True
  elif opt=='-i':
    opt_reflags|=re.IGNORECASE
  elif opt=='-l':
    opt_list=True
  elif opt=='-m':
    opt_match=True
  elif opt=='-n':
    opt_number=True
  elif opt=='-v':
    opt_invert=True

matches=0
try:
  # Compile our regular expression.
  if not args:
    print >>stderr,'%s: Missing regular expression'%argv[0]
    exit(2)
  try:
    r=re.compile(args[0],opt_reflags)
  except Exception,e:
    print >>stderr,'%s: %s'%(argv[0],e)
    exit(2)
  del args[0]

  # Scan the given files (or stdin) for our regular expression.
  if not args:
    args=['-']
  if len(args)==1:
    opt_onefile=True
  for filename in args:
    matches+=grepfile(filename,r)

except IOError,e:
  if 'broken pipe' not in str(e).lower():
    raise

# Terminate with an exit status of 0 if found a match. Otherwise, terminate
# with an exit status of 1.
exit(int(matches<1))
